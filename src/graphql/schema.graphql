# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
}

"An object with an id, parent, and children"
interface Node {
    "The children of this node."
    children: [Node]
    "The id of the node."
    id: ID!
    "The parent of this node."
    parent: Node
}

"Node of type Directory"
type Directory implements Node {
    absolutePath: String
    accessTime(
        #Returns the difference between this date and the current time. Defaults to miliseconds but you can also pass in as the measurement years, months, weeks, days, hours, minutes, and seconds.
        difference: String,
        #Format the date using Moment.js' date tokens e.g. \"date(formatString: \"YYYY MMMM DD)\" See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens
        formatString: String,
        #Returns a string generated with Moment.js' fromNow function
        fromNow: Boolean,
        #Configures the locale Moment.js will use to format the date.
        locale: String
    ): Date
    atime(
        #Returns the difference between this date and the current time. Defaults to miliseconds but you can also pass in as the measurement years, months, weeks, days, hours, minutes, and seconds.
        difference: String,
        #Format the date using Moment.js' date tokens e.g. \"date(formatString: \"YYYY MMMM DD)\" See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens
        formatString: String,
        #Returns a string generated with Moment.js' fromNow function
        fromNow: Boolean,
        #Configures the locale Moment.js will use to format the date.
        locale: String
    ): Date
    atimeMs: Float
    base: String
    birthTime(
        #Returns the difference between this date and the current time. Defaults to miliseconds but you can also pass in as the measurement years, months, weeks, days, hours, minutes, and seconds.
        difference: String,
        #Format the date using Moment.js' date tokens e.g. \"date(formatString: \"YYYY MMMM DD)\" See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens
        formatString: String,
        #Returns a string generated with Moment.js' fromNow function
        fromNow: Boolean,
        #Configures the locale Moment.js will use to format the date.
        locale: String
    ): Date
    birthtime(
        #Returns the difference between this date and the current time. Defaults to miliseconds but you can also pass in as the measurement years, months, weeks, days, hours, minutes, and seconds.
        difference: String,
        #Format the date using Moment.js' date tokens e.g. \"date(formatString: \"YYYY MMMM DD)\" See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens
        formatString: String,
        #Returns a string generated with Moment.js' fromNow function
        fromNow: Boolean,
        #Configures the locale Moment.js will use to format the date.
        locale: String
    ): Date
    birthtimeMs: Float
    blksize: Int
    blocks: Int
    changeTime(
        #Returns the difference between this date and the current time. Defaults to miliseconds but you can also pass in as the measurement years, months, weeks, days, hours, minutes, and seconds.
        difference: String,
        #Format the date using Moment.js' date tokens e.g. \"date(formatString: \"YYYY MMMM DD)\" See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens
        formatString: String,
        #Returns a string generated with Moment.js' fromNow function
        fromNow: Boolean,
        #Configures the locale Moment.js will use to format the date.
        locale: String
    ): Date
    "The children of this node."
    children: [Node]
    ctime(
        #Returns the difference between this date and the current time. Defaults to miliseconds but you can also pass in as the measurement years, months, weeks, days, hours, minutes, and seconds.
        difference: String,
        #Format the date using Moment.js' date tokens e.g. \"date(formatString: \"YYYY MMMM DD)\" See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens
        formatString: String,
        #Returns a string generated with Moment.js' fromNow function
        fromNow: Boolean,
        #Configures the locale Moment.js will use to format the date.
        locale: String
    ): Date
    ctimeMs: Float
    dev: Int
    dir: String
    ext: String
    extension: String
    gid: Int
    "The id of this node."
    id: ID!
    ino: Float
    internal: internal_10
    mode: Int
    modifiedTime(
        #Returns the difference between this date and the current time. Defaults to miliseconds but you can also pass in as the measurement years, months, weeks, days, hours, minutes, and seconds.
        difference: String,
        #Format the date using Moment.js' date tokens e.g. \"date(formatString: \"YYYY MMMM DD)\" See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens
        formatString: String,
        #Returns a string generated with Moment.js' fromNow function
        fromNow: Boolean,
        #Configures the locale Moment.js will use to format the date.
        locale: String
    ): Date
    mtime(
        #Returns the difference between this date and the current time. Defaults to miliseconds but you can also pass in as the measurement years, months, weeks, days, hours, minutes, and seconds.
        difference: String,
        #Format the date using Moment.js' date tokens e.g. \"date(formatString: \"YYYY MMMM DD)\" See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens
        formatString: String,
        #Returns a string generated with Moment.js' fromNow function
        fromNow: Boolean,
        #Configures the locale Moment.js will use to format the date.
        locale: String
    ): Date
    mtimeMs: Float
    name: String
    nlink: Int
    "The parent of this node."
    parent: Node
    prettySize: String
    rdev: Int
    relativeDirectory: String
    relativePath: String
    root: String
    size: Int
    sourceInstanceName: String
    uid: Int
}

"A connection to a list of items."
type DirectoryConnection {
    distinct(field: directoryDistinctEnum): [String]
    "A list of edges."
    edges: [DirectoryEdge]
    group(field: directoryGroupEnum, limit: Int, skip: Int): [directoryGroupConnectionConnection]
    "Information to aid in pagination."
    pageInfo: PageInfo!
    totalCount: Int
}

"An edge in a connection."
type DirectoryEdge {
    "The next edge in the connection"
    next: Directory
    "The item at the end of the edge"
    node: Directory
    "The previous edge in the connection"
    previous: Directory
}

"Node of type File"
type File implements Node {
    absolutePath: String
    accessTime(
        #Returns the difference between this date and the current time. Defaults to miliseconds but you can also pass in as the measurement years, months, weeks, days, hours, minutes, and seconds.
        difference: String,
        #Format the date using Moment.js' date tokens e.g. \"date(formatString: \"YYYY MMMM DD)\" See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens
        formatString: String,
        #Returns a string generated with Moment.js' fromNow function
        fromNow: Boolean,
        #Configures the locale Moment.js will use to format the date.
        locale: String
    ): Date
    atime(
        #Returns the difference between this date and the current time. Defaults to miliseconds but you can also pass in as the measurement years, months, weeks, days, hours, minutes, and seconds.
        difference: String,
        #Format the date using Moment.js' date tokens e.g. \"date(formatString: \"YYYY MMMM DD)\" See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens
        formatString: String,
        #Returns a string generated with Moment.js' fromNow function
        fromNow: Boolean,
        #Configures the locale Moment.js will use to format the date.
        locale: String
    ): Date
    atimeMs: Float
    base: String
    birthTime(
        #Returns the difference between this date and the current time. Defaults to miliseconds but you can also pass in as the measurement years, months, weeks, days, hours, minutes, and seconds.
        difference: String,
        #Format the date using Moment.js' date tokens e.g. \"date(formatString: \"YYYY MMMM DD)\" See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens
        formatString: String,
        #Returns a string generated with Moment.js' fromNow function
        fromNow: Boolean,
        #Configures the locale Moment.js will use to format the date.
        locale: String
    ): Date
    birthtime(
        #Returns the difference between this date and the current time. Defaults to miliseconds but you can also pass in as the measurement years, months, weeks, days, hours, minutes, and seconds.
        difference: String,
        #Format the date using Moment.js' date tokens e.g. \"date(formatString: \"YYYY MMMM DD)\" See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens
        formatString: String,
        #Returns a string generated with Moment.js' fromNow function
        fromNow: Boolean,
        #Configures the locale Moment.js will use to format the date.
        locale: String
    ): Date
    birthtimeMs: Float
    blksize: Int
    blocks: Int
    changeTime(
        #Returns the difference between this date and the current time. Defaults to miliseconds but you can also pass in as the measurement years, months, weeks, days, hours, minutes, and seconds.
        difference: String,
        #Format the date using Moment.js' date tokens e.g. \"date(formatString: \"YYYY MMMM DD)\" See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens
        formatString: String,
        #Returns a string generated with Moment.js' fromNow function
        fromNow: Boolean,
        #Configures the locale Moment.js will use to format the date.
        locale: String
    ): Date
    "The child of this node of type imageSharp"
    childImageSharp: ImageSharp
    "The child of this node of type markdownRemark"
    childMarkdownRemark: MarkdownRemark
    "The children of this node."
    children: [Node]
    ctime(
        #Returns the difference between this date and the current time. Defaults to miliseconds but you can also pass in as the measurement years, months, weeks, days, hours, minutes, and seconds.
        difference: String,
        #Format the date using Moment.js' date tokens e.g. \"date(formatString: \"YYYY MMMM DD)\" See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens
        formatString: String,
        #Returns a string generated with Moment.js' fromNow function
        fromNow: Boolean,
        #Configures the locale Moment.js will use to format the date.
        locale: String
    ): Date
    ctimeMs: Float
    dev: Int
    dir: String
    ext: String
    extension: String
    gid: Int
    "The id of this node."
    id: ID!
    ino: Float
    internal: internal_11
    mode: Int
    modifiedTime(
        #Returns the difference between this date and the current time. Defaults to miliseconds but you can also pass in as the measurement years, months, weeks, days, hours, minutes, and seconds.
        difference: String,
        #Format the date using Moment.js' date tokens e.g. \"date(formatString: \"YYYY MMMM DD)\" See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens
        formatString: String,
        #Returns a string generated with Moment.js' fromNow function
        fromNow: Boolean,
        #Configures the locale Moment.js will use to format the date.
        locale: String
    ): Date
    mtime(
        #Returns the difference between this date and the current time. Defaults to miliseconds but you can also pass in as the measurement years, months, weeks, days, hours, minutes, and seconds.
        difference: String,
        #Format the date using Moment.js' date tokens e.g. \"date(formatString: \"YYYY MMMM DD)\" See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens
        formatString: String,
        #Returns a string generated with Moment.js' fromNow function
        fromNow: Boolean,
        #Configures the locale Moment.js will use to format the date.
        locale: String
    ): Date
    mtimeMs: Float
    name: String
    nlink: Int
    "The parent of this node."
    parent: Node
    prettySize: String
    "Copy file to static directory and return public url to it"
    publicURL: String
    rdev: Int
    relativeDirectory: String
    relativePath: String
    root: String
    size: Int
    sourceInstanceName: String
    uid: Int
}

"A connection to a list of items."
type FileConnection {
    distinct(field: fileDistinctEnum): [String]
    "A list of edges."
    edges: [FileEdge]
    group(field: fileGroupEnum, limit: Int, skip: Int): [fileGroupConnectionConnection]
    "Information to aid in pagination."
    pageInfo: PageInfo!
    totalCount: Int
}

"An edge in a connection."
type FileEdge {
    "The next edge in the connection"
    next: File
    "The item at the end of the edge"
    node: File
    "The previous edge in the connection"
    previous: File
}

"Node of type ImageSharp"
type ImageSharp implements Node {
    "The children of this node."
    children: [Node]
    fixed(base64Width: Int, cropFocus: ImageCropFocus, duotone: DuotoneGradient, grayscale: Boolean = false, height: Int, jpegProgressive: Boolean = true, pngCompressionSpeed: Int = 4, quality: Int, rotate: Int = 0, toFormat: ImageFormat, toFormatBase64: ImageFormat, traceSVG: Potrace, width: Int): ImageSharpFixed
    fluid(
        base64Width: Int,
        cropFocus: ImageCropFocus,
        duotone: DuotoneGradient,
        grayscale: Boolean = false,
        jpegProgressive: Boolean = true,
        maxHeight: Int,
        maxWidth: Int,
        pngCompressionSpeed: Int = 4,
        quality: Int,
        rotate: Int = 0,
        sizes: String = "",
        #A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
        srcSetBreakpoints: [Int] = [],
        toFormat: ImageFormat,
        toFormatBase64: ImageFormat,
        traceSVG: Potrace
    ): ImageSharpFluid
    "The id of this node."
    id: ID!
    internal: internal_12
    original: ImageSharpOriginal
    "The parent of this node."
    parent: Node
    resize(base64: Boolean = false, cropFocus: ImageCropFocus, duotone: DuotoneGradient, grayscale: Boolean = false, height: Int, jpegProgressive: Boolean = true, pngCompressionLevel: Int = 9, pngCompressionSpeed: Int = 4, quality: Int, rotate: Int = 0, toFormat: ImageFormat, traceSVG: Potrace, width: Int): ImageSharpResize
    resolutions(base64Width: Int, cropFocus: ImageCropFocus, duotone: DuotoneGradient, grayscale: Boolean = false, height: Int, jpegProgressive: Boolean = true, pngCompressionSpeed: Int = 4, quality: Int, rotate: Int = 0, toFormat: ImageFormat, toFormatBase64: ImageFormat, traceSVG: Potrace, width: Int): ImageSharpResolutions @deprecated(reason : "Resolutions was deprecated in Gatsby v2. It's been renamed to \"fixed\" https:\/\/example.com\/write-docs-and-fix-this-example-link")
    sizes(
        base64Width: Int,
        cropFocus: ImageCropFocus,
        duotone: DuotoneGradient,
        grayscale: Boolean = false,
        jpegProgressive: Boolean = true,
        maxHeight: Int,
        maxWidth: Int,
        pngCompressionSpeed: Int = 4,
        quality: Int,
        rotate: Int = 0,
        sizes: String = "",
        #A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
        srcSetBreakpoints: [Int] = [],
        toFormat: ImageFormat,
        toFormatBase64: ImageFormat,
        traceSVG: Potrace
    ): ImageSharpSizes @deprecated(reason : "Sizes was deprecated in Gatsby v2. It's been renamed to \"fluid\" https:\/\/example.com\/write-docs-and-fix-this-example-link")
}

"A connection to a list of items."
type ImageSharpConnection {
    distinct(field: imageSharpDistinctEnum): [String]
    "A list of edges."
    edges: [ImageSharpEdge]
    group(field: imageSharpGroupEnum, limit: Int, skip: Int): [imageSharpGroupConnectionConnection]
    "Information to aid in pagination."
    pageInfo: PageInfo!
    totalCount: Int
}

"An edge in a connection."
type ImageSharpEdge {
    "The next edge in the connection"
    next: ImageSharp
    "The item at the end of the edge"
    node: ImageSharp
    "The previous edge in the connection"
    previous: ImageSharp
}

type ImageSharpFixed {
    aspectRatio: Float
    base64: String
    height: Float
    originalName: String
    src: String
    srcSet: String
    srcSetWebp: String
    srcWebp: String
    tracedSVG: String
    width: Float
}

type ImageSharpFluid {
    aspectRatio: Float
    base64: String
    originalImg: String
    originalName: String
    presentationHeight: Int
    presentationWidth: Int
    sizes: String
    src: String
    srcSet: String
    srcSetWebp: String
    srcWebp: String
    tracedSVG: String
}

type ImageSharpOriginal {
    height: Float
    src: String
    width: Float
}

type ImageSharpResize {
    aspectRatio: Float
    height: Int
    originalName: String
    src: String
    tracedSVG: String
    width: Int
}

type ImageSharpResolutions {
    aspectRatio: Float
    base64: String
    height: Float
    originalName: String
    src: String
    srcSet: String
    srcSetWebp: String
    srcWebp: String
    tracedSVG: String
    width: Float
}

type ImageSharpSizes {
    aspectRatio: Float
    base64: String
    originalImg: String
    originalName: String
    presentationHeight: Int
    presentationWidth: Int
    sizes: String
    src: String
    srcSet: String
    srcSetWebp: String
    srcWebp: String
    tracedSVG: String
}

type MarkdownHeading {
    depth: Int
    value: String
}

"Node of type MarkdownRemark"
type MarkdownRemark implements Node {
    "The children of this node."
    children: [Node]
    excerpt(format: ExcerptFormats, pruneLength: Int = 140, truncate: Boolean = false): String
    excerptAst(pruneLength: Int = 140, truncate: Boolean = false): JSON
    fields: fields_2
    fileAbsolutePath: String
    frontmatter: frontmatter_2
    headings(depth: HeadingLevels): [MarkdownHeading]
    html: String
    htmlAst: JSON
    "The id of this node."
    id: ID!
    internal: internal_13
    "The parent of this node."
    parent: Node
    rawMarkdownBody: String
    tableOfContents(heading: String, maxDepth: Int, pathToSlugField: String = "fields.slug"): String
    timeToRead: Int
    wordCount: wordCount
}

"A connection to a list of items."
type MarkdownRemarkConnection {
    distinct(field: markdownRemarkDistinctEnum): [String]
    "A list of edges."
    edges: [MarkdownRemarkEdge]
    group(field: markdownRemarkGroupEnum, limit: Int, skip: Int): [markdownRemarkGroupConnectionConnection]
    "Information to aid in pagination."
    pageInfo: PageInfo!
    totalCount: Int
}

"An edge in a connection."
type MarkdownRemarkEdge {
    "The next edge in the connection"
    next: MarkdownRemark
    "The item at the end of the edge"
    node: MarkdownRemark
    "The previous edge in the connection"
    previous: MarkdownRemark
}

"Information about pagination in a connection."
type PageInfo {
    "When paginating, are there more items?"
    hasNextPage: Boolean!
}

type Query {
    "Connection to all Directory nodes"
    allDirectory(filter: filterDirectory, limit: Int, skip: Int, sort: directoryConnectionSort): DirectoryConnection
    "Connection to all File nodes"
    allFile(filter: filterFile, limit: Int, skip: Int, sort: fileConnectionSort): FileConnection
    "Connection to all ImageSharp nodes"
    allImageSharp(filter: filterImageSharp, limit: Int, skip: Int, sort: imageSharpConnectionSort): ImageSharpConnection
    "Connection to all MarkdownRemark nodes"
    allMarkdownRemark(filter: filterMarkdownRemark, limit: Int, skip: Int, sort: markdownRemarkConnectionSort): MarkdownRemarkConnection
    "Connection to all SitePage nodes"
    allSitePage(filter: filterSitePage, limit: Int, skip: Int, sort: sitePageConnectionSort): SitePageConnection
    "Connection to all SitePlugin nodes"
    allSitePlugin(filter: filterSitePlugin, limit: Int, skip: Int, sort: sitePluginConnectionSort): SitePluginConnection
    directory(absolutePath: directoryAbsolutePathQueryString_2, accessTime: directoryAccessTimeQueryString_2, atime: directoryAtimeQueryString_2, atimeMs: directoryAtimeMsQueryFloat_2, base: directoryBaseQueryString_2, birthTime: directoryBirthTimeQueryString_2, birthtime: directoryBirthtimeQueryString_2, birthtimeMs: directoryBirthtimeMsQueryFloat_2, blksize: directoryBlksizeQueryInteger_2, blocks: directoryBlocksQueryInteger_2, changeTime: directoryChangeTimeQueryString_2, ctime: directoryCtimeQueryString_2, ctimeMs: directoryCtimeMsQueryFloat_2, dev: directoryDevQueryInteger_2, dir: directoryDirQueryString_2, ext: directoryExtQueryString_2, extension: directoryExtensionQueryString_2, gid: directoryGidQueryInteger_2, id: directoryIdQueryString_2, ino: directoryInoQueryFloat_2, internal: directoryInternalInputObject_2, mode: directoryModeQueryInteger_2, modifiedTime: directoryModifiedTimeQueryString_2, mtime: directoryMtimeQueryString_2, mtimeMs: directoryMtimeMsQueryFloat_2, name: directoryNameQueryString_2, nlink: directoryNlinkQueryInteger_2, prettySize: directoryPrettySizeQueryString_2, rdev: directoryRdevQueryInteger_2, relativeDirectory: directoryRelativeDirectoryQueryString_2, relativePath: directoryRelativePathQueryString_2, root: directoryRootQueryString_2, size: directorySizeQueryInteger_2, sourceInstanceName: directorySourceInstanceNameQueryString_2, uid: directoryUidQueryInteger_2): Directory
    file(absolutePath: fileAbsolutePathQueryString_2, accessTime: fileAccessTimeQueryString_2, atime: fileAtimeQueryString_2, atimeMs: fileAtimeMsQueryFloat_2, base: fileBaseQueryString_2, birthTime: fileBirthTimeQueryString_2, birthtime: fileBirthtimeQueryString_2, birthtimeMs: fileBirthtimeMsQueryFloat_2, blksize: fileBlksizeQueryInteger_2, blocks: fileBlocksQueryInteger_2, changeTime: fileChangeTimeQueryString_2, ctime: fileCtimeQueryString_2, ctimeMs: fileCtimeMsQueryFloat_2, dev: fileDevQueryInteger_2, dir: fileDirQueryString_2, ext: fileExtQueryString_2, extension: fileExtensionQueryString_2, gid: fileGidQueryInteger_2, id: fileIdQueryString_2, ino: fileInoQueryFloat_2, internal: fileInternalInputObject_2, mode: fileModeQueryInteger_2, modifiedTime: fileModifiedTimeQueryString_2, mtime: fileMtimeQueryString_2, mtimeMs: fileMtimeMsQueryFloat_2, name: fileNameQueryString_2, nlink: fileNlinkQueryInteger_2, prettySize: filePrettySizeQueryString_2, publicURL: publicUrlQueryString_3, rdev: fileRdevQueryInteger_2, relativeDirectory: fileRelativeDirectoryQueryString_2, relativePath: fileRelativePathQueryString_2, root: fileRootQueryString_2, size: fileSizeQueryInteger_2, sourceInstanceName: fileSourceInstanceNameQueryString_2, uid: fileUidQueryInteger_2): File
    imageSharp(fixed: fixedTypeName_3, fluid: fluidTypeName_3, id: imageSharpIdQueryString_2, internal: imageSharpInternalInputObject_2, original: originalTypeName_3, resize: resizeTypeName_3, resolutions: resolutionsTypeName_3, sizes: sizesTypeName_3): ImageSharp
    markdownRemark(excerpt: excerptQueryString_3, fields: markdownRemarkFieldsInputObject_2, fileAbsolutePath: markdownRemarkFileAbsolutePathQueryString_2, frontmatter: markdownRemarkFrontmatterInputObject_2, headings: headingsQueryList_3, html: htmlQueryString_3, id: markdownRemarkIdQueryString_2, internal: markdownRemarkInternalInputObject_2, rawMarkdownBody: markdownRemarkRawMarkdownBodyQueryString_2, tableOfContents: tableOfContentsQueryString_3, timeToRead: timeToReadQueryInt_3, wordCount: wordCountTypeName_3): MarkdownRemark
    site(buildTime: siteBuildTimeQueryString_2, host: siteHostQueryString_2, id: siteIdQueryString_2, internal: siteInternalInputObject_2, pathPrefix: sitePathPrefixQueryString_2, polyfill: sitePolyfillQueryBoolean_2, port: sitePortQueryString_2, siteMetadata: siteSiteMetadataInputObject_2): Site
    sitePage(component: sitePageComponentQueryString, componentChunkName: sitePageComponentChunkNameQueryString, componentPath: sitePageComponentPathQueryString, context: sitePageContextInputObject, id: sitePageIdQueryString_2, internal: sitePageInternalInputObject_2, internalComponentName: sitePageInternalComponentNameQueryString, jsonName: sitePageJsonNameQueryString, path: sitePagePathQueryString_2, pluginCreator: sitePagePluginCreatorInputObject, pluginCreatorId: sitePagePluginCreatorIdQueryString_2): SitePage
    sitePlugin(browserAPIs: sitePluginBrowserApIsQueryList_2, id: sitePluginIdQueryString_2, internal: sitePluginInternalInputObject_2, name: sitePluginNameQueryString_2, nodeAPIs: sitePluginNodeApIsQueryList_2, packageJson: sitePluginPackageJsonInputObject_2, pluginFilepath: sitePluginPluginFilepathQueryString_2, pluginOptions: sitePluginPluginOptionsInputObject_2, resolve: sitePluginResolveQueryString_2, ssrAPIs: sitePluginSsrApIsQueryList_2, version: sitePluginVersionQueryString_2): SitePlugin
}

"Node of type Site"
type Site implements Node {
    buildTime(
        #Returns the difference between this date and the current time. Defaults to miliseconds but you can also pass in as the measurement years, months, weeks, days, hours, minutes, and seconds.
        difference: String,
        #Format the date using Moment.js' date tokens e.g. \"date(formatString: \"YYYY MMMM DD)\" See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens
        formatString: String,
        #Returns a string generated with Moment.js' fromNow function
        fromNow: Boolean,
        #Configures the locale Moment.js will use to format the date.
        locale: String
    ): Date
    "The children of this node."
    children: [Node]
    host: String
    "The id of this node."
    id: ID!
    internal: internal_14
    "The parent of this node."
    parent: Node
    pathPrefix: String
    polyfill: Boolean
    port(
        #Returns the difference between this date and the current time. Defaults to miliseconds but you can also pass in as the measurement years, months, weeks, days, hours, minutes, and seconds.
        difference: String,
        #Format the date using Moment.js' date tokens e.g. \"date(formatString: \"YYYY MMMM DD)\" See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens
        formatString: String,
        #Returns a string generated with Moment.js' fromNow function
        fromNow: Boolean,
        #Configures the locale Moment.js will use to format the date.
        locale: String
    ): Date
    siteMetadata: siteMetadata_2
}

"Node of type SitePage"
type SitePage implements Node {
    "The children of this node."
    children: [Node]
    component: String
    componentChunkName: String
    componentPath: String
    context: context
    "The id of this node."
    id: ID!
    internal: internal_8
    internalComponentName: String
    jsonName: String
    "The parent of this node."
    parent: Node
    path: String
    pluginCreator: SitePlugin
    pluginCreatorId: String
}

"A connection to a list of items."
type SitePageConnection {
    distinct(field: sitePageDistinctEnum): [String]
    "A list of edges."
    edges: [SitePageEdge]
    group(field: sitePageGroupEnum, limit: Int, skip: Int): [sitePageGroupConnectionConnection]
    "Information to aid in pagination."
    pageInfo: PageInfo!
    totalCount: Int
}

"An edge in a connection."
type SitePageEdge {
    "The next edge in the connection"
    next: SitePage
    "The item at the end of the edge"
    node: SitePage
    "The previous edge in the connection"
    previous: SitePage
}

"Node of type SitePlugin"
type SitePlugin implements Node {
    browserAPIs: [String]
    "The children of this node."
    children: [Node]
    "The id of this node."
    id: ID!
    internal: internal_9
    name: String
    nodeAPIs: [String]
    packageJson: packageJson_2
    "The parent of this node."
    parent: Node
    pluginFilepath: String
    pluginOptions: pluginOptions_3
    resolve: String
    ssrAPIs: [String]
    version: String
}

"A connection to a list of items."
type SitePluginConnection {
    distinct(field: sitePluginDistinctEnum): [String]
    "A list of edges."
    edges: [SitePluginEdge]
    group(field: sitePluginGroupEnum, limit: Int, skip: Int): [sitePluginGroupConnectionConnection]
    "Information to aid in pagination."
    pageInfo: PageInfo!
    totalCount: Int
}

"An edge in a connection."
type SitePluginEdge {
    "The next edge in the connection"
    next: SitePlugin
    "The item at the end of the edge"
    node: SitePlugin
    "The previous edge in the connection"
    previous: SitePlugin
}

type advisors_2 {
    heading: String
}

type banner_2 {
    alt: String
    image: File
}

type blurbs_2 {
    image: File
    text: String
}

type context {
    id: String
    lang: String
    tag: String
}

type dependencies_2 {
    name: String
    version: String
}

type devDependencies_2 {
    name: String
    version: String
}

"A connection to a list of items."
type directoryGroupConnectionConnection {
    "A list of edges."
    edges: [directoryGroupConnectionEdge]
    field: String
    fieldValue: String
    "Information to aid in pagination."
    pageInfo: PageInfo!
    totalCount: Int
}

"An edge in a connection."
type directoryGroupConnectionEdge {
    "The next edge in the connection"
    next: Directory
    "The item at the end of the edge"
    node: Directory
    "The previous edge in the connection"
    previous: Directory
}

type fieldOwners_2 {
    slug: String
}

type fields_2 {
    slug: String
}

"A connection to a list of items."
type fileGroupConnectionConnection {
    "A list of edges."
    edges: [fileGroupConnectionEdge]
    field: String
    fieldValue: String
    "Information to aid in pagination."
    pageInfo: PageInfo!
    totalCount: Int
}

"An edge in a connection."
type fileGroupConnectionEdge {
    "The next edge in the connection"
    next: File
    "The item at the end of the edge"
    node: File
    "The previous edge in the connection"
    previous: File
}

type footer_2 {
    links: [links_2]
    title: String
}

type frontmatter_2 {
    about: String
    advisors: advisors_2
    angelList: String
    component: String
    copyright: String
    date(
        #Returns the difference between this date and the current time. Defaults to miliseconds but you can also pass in as the measurement years, months, weeks, days, hours, minutes, and seconds.
        difference: String,
        #Format the date using Moment.js' date tokens e.g. \"date(formatString: \"YYYY MMMM DD)\" See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens
        formatString: String,
        #Returns a string generated with Moment.js' fromNow function
        fromNow: Boolean,
        #Configures the locale Moment.js will use to format the date.
        locale: String
    ): Date
    description: String
    footer: [footer_2]
    full_image: File
    github: String
    heading: String
    hero: hero_2
    hiring: hiring_2
    image: File
    img: File
    intro: intro_2
    investors: investors_2
    linkedin: String
    main: main_2
    name: String
    offerings: offerings_2
    onHomepage: Boolean
    order: Int
    partnerships: partnerships_2
    path: String
    position: String
    pricing: pricing_2
    products: products_3
    subheading: String
    tags: [String]
    team: team_2
    templateKey: String
    testimonials: [testimonials_2]
    title: String
    twitter: String
}

type hero_2 {
    banner: banner_2
    comingDate: String
    description: String
    title: String
}

type hiring_2 {
    content: String
    heading: String
    link: String
    linkText: String
}

type icon_2 {
    image: File
}

type image1_2 {
    alt: String
    image: File
}

type image2_2 {
    alt: String
    image: File
}

type image3_2 {
    alt: String
    image: File
}

"A connection to a list of items."
type imageSharpGroupConnectionConnection {
    "A list of edges."
    edges: [imageSharpGroupConnectionEdge]
    field: String
    fieldValue: String
    "Information to aid in pagination."
    pageInfo: PageInfo!
    totalCount: Int
}

"An edge in a connection."
type imageSharpGroupConnectionEdge {
    "The next edge in the connection"
    next: ImageSharp
    "The item at the end of the edge"
    node: ImageSharp
    "The previous edge in the connection"
    previous: ImageSharp
}

type img_4 {
    alt: String
    image: File
}

type img_5 {
    alt: String
    image: File
}

type img_6 {
    alt: String
    image: File
}

type internal_10 {
    contentDigest: String
    description: String
    owner: String
    type: String
}

type internal_11 {
    contentDigest: String
    description: String
    mediaType: String
    owner: String
    type: String
}

type internal_12 {
    contentDigest: String
    owner: String
    type: String
}

type internal_13 {
    content: String
    contentDigest: String
    fieldOwners: fieldOwners_2
    owner: String
    type: String
}

type internal_14 {
    contentDigest: String
    owner: String
    type: String
}

type internal_8 {
    contentDigest: String
    description: String
    owner: String
    type: String
}

type internal_9 {
    contentDigest: String
    owner: String
    type: String
}

type intro_2 {
    blurbs: [blurbs_2]
    content: String
    description: String
    heading: String
    img: img_4
}

type investors_2 {
    heading: String
    list: [list_5]
}

type links_2 {
    label: String
    openNewTab: String
    url: String
}

type list_4 {
    items: [String]
    title: String
}

type list_5 {
    img: img_6
    title: String
    url: String
}

type list_6 {
    icon: icon_2
    title: String
}

type main_2 {
    description: String
    heading: String
    image1: image1_2
    image2: image2_2
    image3: image3_2
}

"A connection to a list of items."
type markdownRemarkGroupConnectionConnection {
    "A list of edges."
    edges: [markdownRemarkGroupConnectionEdge]
    field: String
    fieldValue: String
    "Information to aid in pagination."
    pageInfo: PageInfo!
    totalCount: Int
}

"An edge in a connection."
type markdownRemarkGroupConnectionEdge {
    "The next edge in the connection"
    next: MarkdownRemark
    "The item at the end of the edge"
    node: MarkdownRemark
    "The previous edge in the connection"
    previous: MarkdownRemark
}

type offerings_2 {
    content: String
    heading: String
    list: [list_4]
}

type packageJson_2 {
    author: String
    dependencies: [dependencies_2]
    description: String
    devDependencies: [devDependencies_2]
    keywords: [String]
    license: String
    main: String
    name: String
    peerDependencies: [peerDependencies_2]
    version: String
}

type partnerships_2 {
    heading: String
    list: [list_6]
}

type peerDependencies_2 {
    name: String
    version: String
}

type plans_2 {
    description: String
    items: [String]
    plan: String
    price: String
}

type pluginOptions_3 {
    color: String
    destinationDir: String
    develop: Boolean
    displayName: Boolean
    maxWidth: Int
    modulePath: String
    name: String
    path: String
    pathCheck: Boolean
    plugins: [plugins_2]
    purgeOnly: [String]
    showSpinner: Boolean
}

type pluginOptions_4 {
    destinationDir: String
    maxWidth: Int
    name: String
}

type plugins_2 {
    browserAPIs: [String]
    id: String
    name: String
    pluginFilepath: String
    pluginOptions: pluginOptions_4
    resolve: String
    version: String
}

type pricing_2 {
    description: String
    heading: String
    plans: [plans_2]
}

type products_3 {
    heading: String
    products: [products_4]
}

type products_4 {
    content: String
    img: img_5
    list: [String]
    title: String
}

type siteMetadata_2 {
    description: String
    title: String
}

"A connection to a list of items."
type sitePageGroupConnectionConnection {
    "A list of edges."
    edges: [sitePageGroupConnectionEdge]
    field: String
    fieldValue: String
    "Information to aid in pagination."
    pageInfo: PageInfo!
    totalCount: Int
}

"An edge in a connection."
type sitePageGroupConnectionEdge {
    "The next edge in the connection"
    next: SitePage
    "The item at the end of the edge"
    node: SitePage
    "The previous edge in the connection"
    previous: SitePage
}

"A connection to a list of items."
type sitePluginGroupConnectionConnection {
    "A list of edges."
    edges: [sitePluginGroupConnectionEdge]
    field: String
    fieldValue: String
    "Information to aid in pagination."
    pageInfo: PageInfo!
    totalCount: Int
}

"An edge in a connection."
type sitePluginGroupConnectionEdge {
    "The next edge in the connection"
    next: SitePlugin
    "The item at the end of the edge"
    node: SitePlugin
    "The previous edge in the connection"
    previous: SitePlugin
}

type team_2 {
    content: String
    heading: String
}

type testimonials_2 {
    author: String
    quote: String
}

type wordCount {
    paragraphs: Int
    sentences: Int
    words: Int
}

enum DirectoryConnectionSortByFieldsEnum {
    absolutePath
    accessTime
    atime
    atimeMs
    base
    birthTime
    birthtime
    birthtimeMs
    blksize
    blocks
    changeTime
    ctime
    ctimeMs
    dev
    dir
    ext
    extension
    gid
    id
    ino
    internal___contentDigest
    internal___description
    internal___owner
    internal___type
    mode
    modifiedTime
    mtime
    mtimeMs
    name
    nlink
    prettySize
    rdev
    relativeDirectory
    relativePath
    root
    size
    sourceInstanceName
    uid
}

enum ExcerptFormats {
    HTML
    PLAIN
}

enum FileConnectionSortByFieldsEnum {
    absolutePath
    accessTime
    atime
    atimeMs
    base
    birthTime
    birthtime
    birthtimeMs
    blksize
    blocks
    changeTime
    children
    ctime
    ctimeMs
    dev
    dir
    ext
    extension
    gid
    id
    ino
    internal___contentDigest
    internal___description
    internal___mediaType
    internal___owner
    internal___type
    mode
    modifiedTime
    mtime
    mtimeMs
    name
    nlink
    prettySize
    publicURL
    rdev
    relativeDirectory
    relativePath
    root
    size
    sourceInstanceName
    uid
}

enum HeadingLevels {
    h1
    h2
    h3
    h4
    h5
    h6
}

enum ImageCropFocus {
    ATTENTION
    CENTER
    EAST
    ENTROPY
    NORTH
    NORTHEAST
    NORTHWEST
    SOUTH
    SOUTHEAST
    SOUTHWEST
    WEST
}

enum ImageFormat {
    JPG
    NO_CHANGE
    PNG
    WEBP
}

enum ImageSharpConnectionSortByFieldsEnum {
    fixed___aspectRatio
    fixed___base64
    fixed___height
    fixed___originalName
    fixed___src
    fixed___srcSet
    fixed___srcSetWebp
    fixed___srcWebp
    fixed___tracedSVG
    fixed___width
    fluid___aspectRatio
    fluid___base64
    fluid___originalImg
    fluid___originalName
    fluid___presentationHeight
    fluid___presentationWidth
    fluid___sizes
    fluid___src
    fluid___srcSet
    fluid___srcSetWebp
    fluid___srcWebp
    fluid___tracedSVG
    id
    internal___contentDigest
    internal___owner
    internal___type
    original___height
    original___src
    original___width
    parent
    resize___aspectRatio
    resize___height
    resize___originalName
    resize___src
    resize___tracedSVG
    resize___width
    resolutions___aspectRatio
    resolutions___base64
    resolutions___height
    resolutions___originalName
    resolutions___src
    resolutions___srcSet
    resolutions___srcSetWebp
    resolutions___srcWebp
    resolutions___tracedSVG
    resolutions___width
    sizes___aspectRatio
    sizes___base64
    sizes___originalImg
    sizes___originalName
    sizes___presentationHeight
    sizes___presentationWidth
    sizes___sizes
    sizes___src
    sizes___srcSet
    sizes___srcSetWebp
    sizes___srcWebp
    sizes___tracedSVG
}

enum MarkdownRemarkConnectionSortByFieldsEnum {
    excerpt
    fields___slug
    fileAbsolutePath
    frontmatter___about
    frontmatter___advisors___heading
    frontmatter___angelList
    frontmatter___component
    frontmatter___copyright
    frontmatter___date
    frontmatter___description
    frontmatter___footer
    frontmatter___full_image
    frontmatter___github
    frontmatter___heading
    frontmatter___hero___banner
    frontmatter___hero___comingDate
    frontmatter___hero___description
    frontmatter___hero___title
    frontmatter___hiring___content
    frontmatter___hiring___heading
    frontmatter___hiring___link
    frontmatter___hiring___linkText
    frontmatter___image
    frontmatter___img
    frontmatter___intro___blurbs
    frontmatter___intro___content
    frontmatter___intro___description
    frontmatter___intro___heading
    frontmatter___intro___img
    frontmatter___investors___heading
    frontmatter___investors___list
    frontmatter___linkedin
    frontmatter___main___description
    frontmatter___main___heading
    frontmatter___main___image1
    frontmatter___main___image2
    frontmatter___main___image3
    frontmatter___name
    frontmatter___offerings___content
    frontmatter___offerings___heading
    frontmatter___offerings___list
    frontmatter___onHomepage
    frontmatter___order
    frontmatter___partnerships___heading
    frontmatter___partnerships___list
    frontmatter___path
    frontmatter___position
    frontmatter___pricing___description
    frontmatter___pricing___heading
    frontmatter___pricing___plans
    frontmatter___products___heading
    frontmatter___products___products
    frontmatter___subheading
    frontmatter___tags
    frontmatter___team___content
    frontmatter___team___heading
    frontmatter___templateKey
    frontmatter___testimonials
    frontmatter___title
    frontmatter___twitter
    headings
    html
    id
    internal___content
    internal___contentDigest
    internal___fieldOwners___slug
    internal___owner
    internal___type
    parent
    rawMarkdownBody
    tableOfContents
    timeToRead
    wordCount___paragraphs
    wordCount___sentences
    wordCount___words
}

enum PotraceTurnPolicy {
    TURNPOLICY_BLACK
    TURNPOLICY_LEFT
    TURNPOLICY_MAJORITY
    TURNPOLICY_MINORITY
    TURNPOLICY_RIGHT
    TURNPOLICY_WHITE
}

enum SitePageConnectionSortByFieldsEnum {
    component
    componentChunkName
    componentPath
    context___id
    context___lang
    context___tag
    id
    internalComponentName
    internal___contentDigest
    internal___description
    internal___owner
    internal___type
    jsonName
    path
    pluginCreatorId
    pluginCreator___NODE
}

enum SitePluginConnectionSortByFieldsEnum {
    browserAPIs
    id
    internal___contentDigest
    internal___owner
    internal___type
    name
    nodeAPIs
    packageJson___author
    packageJson___dependencies
    packageJson___description
    packageJson___devDependencies
    packageJson___keywords
    packageJson___license
    packageJson___main
    packageJson___name
    packageJson___peerDependencies
    packageJson___version
    pluginFilepath
    pluginOptions___color
    pluginOptions___destinationDir
    pluginOptions___develop
    pluginOptions___displayName
    pluginOptions___maxWidth
    pluginOptions___modulePath
    pluginOptions___name
    pluginOptions___path
    pluginOptions___pathCheck
    pluginOptions___plugins
    pluginOptions___purgeOnly
    pluginOptions___showSpinner
    resolve
    ssrAPIs
    version
}

enum directoryConnectionSortOrderValues {
    ASC
    DESC
}

enum directoryDistinctEnum {
    absolutePath
    accessTime
    atime
    atimeMs
    base
    birthTime
    birthtime
    birthtimeMs
    blksize
    blocks
    changeTime
    ctime
    ctimeMs
    dev
    dir
    ext
    extension
    gid
    id
    ino
    internal___contentDigest
    internal___description
    internal___owner
    internal___type
    mode
    modifiedTime
    mtime
    mtimeMs
    name
    nlink
    prettySize
    rdev
    relativeDirectory
    relativePath
    root
    size
    sourceInstanceName
    uid
}

enum directoryGroupEnum {
    absolutePath
    accessTime
    atime
    atimeMs
    base
    birthTime
    birthtime
    birthtimeMs
    blksize
    blocks
    changeTime
    ctime
    ctimeMs
    dev
    dir
    ext
    extension
    gid
    id
    ino
    internal___contentDigest
    internal___description
    internal___owner
    internal___type
    mode
    modifiedTime
    mtime
    mtimeMs
    name
    nlink
    prettySize
    rdev
    relativeDirectory
    relativePath
    root
    size
    sourceInstanceName
    uid
}

enum fileConnectionSortOrderValues {
    ASC
    DESC
}

enum fileDistinctEnum {
    absolutePath
    accessTime
    atime
    atimeMs
    base
    birthTime
    birthtime
    birthtimeMs
    blksize
    blocks
    changeTime
    children
    ctime
    ctimeMs
    dev
    dir
    ext
    extension
    gid
    id
    ino
    internal___contentDigest
    internal___description
    internal___mediaType
    internal___owner
    internal___type
    mode
    modifiedTime
    mtime
    mtimeMs
    name
    nlink
    prettySize
    rdev
    relativeDirectory
    relativePath
    root
    size
    sourceInstanceName
    uid
}

enum fileGroupEnum {
    absolutePath
    accessTime
    atime
    atimeMs
    base
    birthTime
    birthtime
    birthtimeMs
    blksize
    blocks
    changeTime
    children
    ctime
    ctimeMs
    dev
    dir
    ext
    extension
    gid
    id
    ino
    internal___contentDigest
    internal___description
    internal___mediaType
    internal___owner
    internal___type
    mode
    modifiedTime
    mtime
    mtimeMs
    name
    nlink
    prettySize
    rdev
    relativeDirectory
    relativePath
    root
    size
    sourceInstanceName
    uid
}

enum imageSharpConnectionSortOrderValues {
    ASC
    DESC
}

enum imageSharpDistinctEnum {
    id
    internal___contentDigest
    internal___owner
    internal___type
    parent
}

enum imageSharpGroupEnum {
    id
    internal___contentDigest
    internal___owner
    internal___type
    parent
}

enum markdownRemarkConnectionSortOrderValues {
    ASC
    DESC
}

enum markdownRemarkDistinctEnum {
    fields___slug
    fileAbsolutePath
    frontmatter___about
    frontmatter___advisors___heading
    frontmatter___angelList
    frontmatter___component
    frontmatter___copyright
    frontmatter___date
    frontmatter___description
    frontmatter___footer
    frontmatter___full_image
    frontmatter___github
    frontmatter___heading
    frontmatter___hero___banner
    frontmatter___hero___comingDate
    frontmatter___hero___description
    frontmatter___hero___title
    frontmatter___hiring___content
    frontmatter___hiring___heading
    frontmatter___hiring___link
    frontmatter___hiring___linkText
    frontmatter___image
    frontmatter___img
    frontmatter___intro___blurbs
    frontmatter___intro___content
    frontmatter___intro___description
    frontmatter___intro___heading
    frontmatter___intro___img
    frontmatter___investors___heading
    frontmatter___investors___list
    frontmatter___linkedin
    frontmatter___main___description
    frontmatter___main___heading
    frontmatter___main___image1
    frontmatter___main___image2
    frontmatter___main___image3
    frontmatter___name
    frontmatter___offerings___content
    frontmatter___offerings___heading
    frontmatter___offerings___list
    frontmatter___onHomepage
    frontmatter___order
    frontmatter___partnerships___heading
    frontmatter___partnerships___list
    frontmatter___path
    frontmatter___position
    frontmatter___pricing___description
    frontmatter___pricing___heading
    frontmatter___pricing___plans
    frontmatter___products___heading
    frontmatter___products___products
    frontmatter___subheading
    frontmatter___tags
    frontmatter___team___content
    frontmatter___team___heading
    frontmatter___templateKey
    frontmatter___testimonials
    frontmatter___title
    frontmatter___twitter
    id
    internal___content
    internal___contentDigest
    internal___fieldOwners___slug
    internal___owner
    internal___type
    parent
    rawMarkdownBody
}

enum markdownRemarkGroupEnum {
    fields___slug
    fileAbsolutePath
    frontmatter___about
    frontmatter___advisors___heading
    frontmatter___angelList
    frontmatter___component
    frontmatter___copyright
    frontmatter___date
    frontmatter___description
    frontmatter___footer
    frontmatter___full_image
    frontmatter___github
    frontmatter___heading
    frontmatter___hero___banner
    frontmatter___hero___comingDate
    frontmatter___hero___description
    frontmatter___hero___title
    frontmatter___hiring___content
    frontmatter___hiring___heading
    frontmatter___hiring___link
    frontmatter___hiring___linkText
    frontmatter___image
    frontmatter___img
    frontmatter___intro___blurbs
    frontmatter___intro___content
    frontmatter___intro___description
    frontmatter___intro___heading
    frontmatter___intro___img
    frontmatter___investors___heading
    frontmatter___investors___list
    frontmatter___linkedin
    frontmatter___main___description
    frontmatter___main___heading
    frontmatter___main___image1
    frontmatter___main___image2
    frontmatter___main___image3
    frontmatter___name
    frontmatter___offerings___content
    frontmatter___offerings___heading
    frontmatter___offerings___list
    frontmatter___onHomepage
    frontmatter___order
    frontmatter___partnerships___heading
    frontmatter___partnerships___list
    frontmatter___path
    frontmatter___position
    frontmatter___pricing___description
    frontmatter___pricing___heading
    frontmatter___pricing___plans
    frontmatter___products___heading
    frontmatter___products___products
    frontmatter___subheading
    frontmatter___tags
    frontmatter___team___content
    frontmatter___team___heading
    frontmatter___templateKey
    frontmatter___testimonials
    frontmatter___title
    frontmatter___twitter
    id
    internal___content
    internal___contentDigest
    internal___fieldOwners___slug
    internal___owner
    internal___type
    parent
    rawMarkdownBody
}

enum sitePageConnectionSortOrderValues {
    ASC
    DESC
}

enum sitePageDistinctEnum {
    component
    componentChunkName
    componentPath
    context___id
    context___lang
    context___tag
    id
    internalComponentName
    internal___contentDigest
    internal___description
    internal___owner
    internal___type
    jsonName
    path
    pluginCreatorId
    pluginCreator___NODE
}

enum sitePageGroupEnum {
    component
    componentChunkName
    componentPath
    context___id
    context___lang
    context___tag
    id
    internalComponentName
    internal___contentDigest
    internal___description
    internal___owner
    internal___type
    jsonName
    path
    pluginCreatorId
    pluginCreator___NODE
}

enum sitePluginConnectionSortOrderValues {
    ASC
    DESC
}

enum sitePluginDistinctEnum {
    browserAPIs
    id
    internal___contentDigest
    internal___owner
    internal___type
    name
    nodeAPIs
    packageJson___author
    packageJson___dependencies
    packageJson___description
    packageJson___devDependencies
    packageJson___keywords
    packageJson___license
    packageJson___main
    packageJson___name
    packageJson___peerDependencies
    packageJson___version
    pluginFilepath
    pluginOptions___color
    pluginOptions___destinationDir
    pluginOptions___develop
    pluginOptions___displayName
    pluginOptions___maxWidth
    pluginOptions___modulePath
    pluginOptions___name
    pluginOptions___path
    pluginOptions___pathCheck
    pluginOptions___plugins
    pluginOptions___purgeOnly
    pluginOptions___showSpinner
    resolve
    ssrAPIs
    version
}

enum sitePluginGroupEnum {
    browserAPIs
    id
    internal___contentDigest
    internal___owner
    internal___type
    name
    nodeAPIs
    packageJson___author
    packageJson___dependencies
    packageJson___description
    packageJson___devDependencies
    packageJson___keywords
    packageJson___license
    packageJson___main
    packageJson___name
    packageJson___peerDependencies
    packageJson___version
    pluginFilepath
    pluginOptions___color
    pluginOptions___destinationDir
    pluginOptions___develop
    pluginOptions___displayName
    pluginOptions___maxWidth
    pluginOptions___modulePath
    pluginOptions___name
    pluginOptions___path
    pluginOptions___pathCheck
    pluginOptions___plugins
    pluginOptions___purgeOnly
    pluginOptions___showSpinner
    resolve
    ssrAPIs
    version
}

input DuotoneGradient {
    highlight: String
    opacity: Int
    shadow: String
}

input Potrace {
    alphaMax: Float
    background: String
    blackOnWhite: Boolean
    color: String
    optCurve: Boolean
    optTolerance: Float
    threshold: Int
    turdSize: Float
    turnPolicy: PotraceTurnPolicy
}

input directoryAbsolutePathQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryAccessTimeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryAtimeMsQueryFloat_2 {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input directoryAtimeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryBaseQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryBirthTimeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryBirthtimeMsQueryFloat_2 {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input directoryBirthtimeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryBlksizeQueryInteger_2 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input directoryBlocksQueryInteger_2 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input directoryChangeTimeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryConnectionAbsolutePathQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryConnectionAccessTimeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryConnectionAtimeMsQueryFloat_2 {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input directoryConnectionAtimeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryConnectionBaseQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryConnectionBirthTimeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryConnectionBirthtimeMsQueryFloat_2 {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input directoryConnectionBirthtimeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryConnectionBlksizeQueryInteger_2 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input directoryConnectionBlocksQueryInteger_2 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input directoryConnectionChangeTimeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryConnectionCtimeMsQueryFloat_2 {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input directoryConnectionCtimeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryConnectionDevQueryInteger_2 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input directoryConnectionDirQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryConnectionExtQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryConnectionExtensionQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryConnectionGidQueryInteger_2 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input directoryConnectionIdQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryConnectionInoQueryFloat_2 {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input directoryConnectionInternalContentDigestQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryConnectionInternalDescriptionQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryConnectionInternalInputObject_2 {
    contentDigest: directoryConnectionInternalContentDigestQueryString_2
    description: directoryConnectionInternalDescriptionQueryString_2
    owner: directoryConnectionInternalOwnerQueryString_2
    type: directoryConnectionInternalTypeQueryString_2
}

input directoryConnectionInternalOwnerQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryConnectionInternalTypeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryConnectionModeQueryInteger_2 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input directoryConnectionModifiedTimeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryConnectionMtimeMsQueryFloat_2 {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input directoryConnectionMtimeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryConnectionNameQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryConnectionNlinkQueryInteger_2 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input directoryConnectionPrettySizeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryConnectionRdevQueryInteger_2 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input directoryConnectionRelativeDirectoryQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryConnectionRelativePathQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryConnectionRootQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryConnectionSizeQueryInteger_2 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input directoryConnectionSort {
    fields: [DirectoryConnectionSortByFieldsEnum]!
    order: [directoryConnectionSortOrderValues] = [ASC]
}

input directoryConnectionSourceInstanceNameQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryConnectionUidQueryInteger_2 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input directoryCtimeMsQueryFloat_2 {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input directoryCtimeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryDevQueryInteger_2 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input directoryDirQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryExtQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryExtensionQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryGidQueryInteger_2 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input directoryIdQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryInoQueryFloat_2 {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input directoryInternalContentDigestQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryInternalDescriptionQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryInternalInputObject_2 {
    contentDigest: directoryInternalContentDigestQueryString_2
    description: directoryInternalDescriptionQueryString_2
    owner: directoryInternalOwnerQueryString_2
    type: directoryInternalTypeQueryString_2
}

input directoryInternalOwnerQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryInternalTypeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryModeQueryInteger_2 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input directoryModifiedTimeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryMtimeMsQueryFloat_2 {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input directoryMtimeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryNameQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryNlinkQueryInteger_2 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input directoryPrettySizeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryRdevQueryInteger_2 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input directoryRelativeDirectoryQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryRelativePathQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryRootQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directorySizeQueryInteger_2 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input directorySourceInstanceNameQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input directoryUidQueryInteger_2 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input excerptQueryString_3 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input excerptQueryString_4 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileAbsolutePathQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileAccessTimeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileAtimeMsQueryFloat_2 {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input fileAtimeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileBaseQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileBirthTimeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileBirthtimeMsQueryFloat_2 {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input fileBirthtimeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileBlksizeQueryInteger_2 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input fileBlocksQueryInteger_2 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input fileChangeTimeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileConnectionAbsolutePathQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileConnectionAccessTimeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileConnectionAtimeMsQueryFloat_2 {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input fileConnectionAtimeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileConnectionBaseQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileConnectionBirthTimeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileConnectionBirthtimeMsQueryFloat_2 {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input fileConnectionBirthtimeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileConnectionBlksizeQueryInteger_2 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input fileConnectionBlocksQueryInteger_2 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input fileConnectionChangeTimeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileConnectionCtimeMsQueryFloat_2 {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input fileConnectionCtimeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileConnectionDevQueryInteger_2 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input fileConnectionDirQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileConnectionExtQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileConnectionExtensionQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileConnectionGidQueryInteger_2 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input fileConnectionIdQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileConnectionInoQueryFloat_2 {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input fileConnectionInternalContentDigestQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileConnectionInternalDescriptionQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileConnectionInternalInputObject_2 {
    contentDigest: fileConnectionInternalContentDigestQueryString_2
    description: fileConnectionInternalDescriptionQueryString_2
    mediaType: fileConnectionInternalMediaTypeQueryString_2
    owner: fileConnectionInternalOwnerQueryString_2
    type: fileConnectionInternalTypeQueryString_2
}

input fileConnectionInternalMediaTypeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileConnectionInternalOwnerQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileConnectionInternalTypeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileConnectionModeQueryInteger_2 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input fileConnectionModifiedTimeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileConnectionMtimeMsQueryFloat_2 {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input fileConnectionMtimeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileConnectionNameQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileConnectionNlinkQueryInteger_2 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input fileConnectionPrettySizeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileConnectionRdevQueryInteger_2 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input fileConnectionRelativeDirectoryQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileConnectionRelativePathQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileConnectionRootQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileConnectionSizeQueryInteger_2 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input fileConnectionSort {
    fields: [FileConnectionSortByFieldsEnum]!
    order: [fileConnectionSortOrderValues] = [ASC]
}

input fileConnectionSourceInstanceNameQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileConnectionUidQueryInteger_2 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input fileCtimeMsQueryFloat_2 {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input fileCtimeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileDevQueryInteger_2 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input fileDirQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileExtQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileExtensionQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileGidQueryInteger_2 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input fileIdQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileInoQueryFloat_2 {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input fileInternalContentDigestQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileInternalDescriptionQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileInternalInputObject_2 {
    contentDigest: fileInternalContentDigestQueryString_2
    description: fileInternalDescriptionQueryString_2
    mediaType: fileInternalMediaTypeQueryString_2
    owner: fileInternalOwnerQueryString_2
    type: fileInternalTypeQueryString_2
}

input fileInternalMediaTypeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileInternalOwnerQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileInternalTypeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileModeQueryInteger_2 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input fileModifiedTimeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileMtimeMsQueryFloat_2 {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input fileMtimeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileNameQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileNlinkQueryInteger_2 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input filePrettySizeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileRdevQueryInteger_2 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input fileRelativeDirectoryQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileRelativePathQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileRootQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileSizeQueryInteger_2 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input fileSourceInstanceNameQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fileUidQueryInteger_2 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

"Filter connection on its fields"
input filterDirectory {
    absolutePath: directoryConnectionAbsolutePathQueryString_2
    accessTime: directoryConnectionAccessTimeQueryString_2
    atime: directoryConnectionAtimeQueryString_2
    atimeMs: directoryConnectionAtimeMsQueryFloat_2
    base: directoryConnectionBaseQueryString_2
    birthTime: directoryConnectionBirthTimeQueryString_2
    birthtime: directoryConnectionBirthtimeQueryString_2
    birthtimeMs: directoryConnectionBirthtimeMsQueryFloat_2
    blksize: directoryConnectionBlksizeQueryInteger_2
    blocks: directoryConnectionBlocksQueryInteger_2
    changeTime: directoryConnectionChangeTimeQueryString_2
    ctime: directoryConnectionCtimeQueryString_2
    ctimeMs: directoryConnectionCtimeMsQueryFloat_2
    dev: directoryConnectionDevQueryInteger_2
    dir: directoryConnectionDirQueryString_2
    ext: directoryConnectionExtQueryString_2
    extension: directoryConnectionExtensionQueryString_2
    gid: directoryConnectionGidQueryInteger_2
    id: directoryConnectionIdQueryString_2
    ino: directoryConnectionInoQueryFloat_2
    internal: directoryConnectionInternalInputObject_2
    mode: directoryConnectionModeQueryInteger_2
    modifiedTime: directoryConnectionModifiedTimeQueryString_2
    mtime: directoryConnectionMtimeQueryString_2
    mtimeMs: directoryConnectionMtimeMsQueryFloat_2
    name: directoryConnectionNameQueryString_2
    nlink: directoryConnectionNlinkQueryInteger_2
    prettySize: directoryConnectionPrettySizeQueryString_2
    rdev: directoryConnectionRdevQueryInteger_2
    relativeDirectory: directoryConnectionRelativeDirectoryQueryString_2
    relativePath: directoryConnectionRelativePathQueryString_2
    root: directoryConnectionRootQueryString_2
    size: directoryConnectionSizeQueryInteger_2
    sourceInstanceName: directoryConnectionSourceInstanceNameQueryString_2
    uid: directoryConnectionUidQueryInteger_2
}

"Filter connection on its fields"
input filterFile {
    absolutePath: fileConnectionAbsolutePathQueryString_2
    accessTime: fileConnectionAccessTimeQueryString_2
    atime: fileConnectionAtimeQueryString_2
    atimeMs: fileConnectionAtimeMsQueryFloat_2
    base: fileConnectionBaseQueryString_2
    birthTime: fileConnectionBirthTimeQueryString_2
    birthtime: fileConnectionBirthtimeQueryString_2
    birthtimeMs: fileConnectionBirthtimeMsQueryFloat_2
    blksize: fileConnectionBlksizeQueryInteger_2
    blocks: fileConnectionBlocksQueryInteger_2
    changeTime: fileConnectionChangeTimeQueryString_2
    ctime: fileConnectionCtimeQueryString_2
    ctimeMs: fileConnectionCtimeMsQueryFloat_2
    dev: fileConnectionDevQueryInteger_2
    dir: fileConnectionDirQueryString_2
    ext: fileConnectionExtQueryString_2
    extension: fileConnectionExtensionQueryString_2
    gid: fileConnectionGidQueryInteger_2
    id: fileConnectionIdQueryString_2
    ino: fileConnectionInoQueryFloat_2
    internal: fileConnectionInternalInputObject_2
    mode: fileConnectionModeQueryInteger_2
    modifiedTime: fileConnectionModifiedTimeQueryString_2
    mtime: fileConnectionMtimeQueryString_2
    mtimeMs: fileConnectionMtimeMsQueryFloat_2
    name: fileConnectionNameQueryString_2
    nlink: fileConnectionNlinkQueryInteger_2
    prettySize: fileConnectionPrettySizeQueryString_2
    publicURL: publicUrlQueryString_4
    rdev: fileConnectionRdevQueryInteger_2
    relativeDirectory: fileConnectionRelativeDirectoryQueryString_2
    relativePath: fileConnectionRelativePathQueryString_2
    root: fileConnectionRootQueryString_2
    size: fileConnectionSizeQueryInteger_2
    sourceInstanceName: fileConnectionSourceInstanceNameQueryString_2
    uid: fileConnectionUidQueryInteger_2
}

"Filter connection on its fields"
input filterImageSharp {
    fixed: fixedTypeName_4
    fluid: fluidTypeName_4
    id: imageSharpConnectionIdQueryString_2
    internal: imageSharpConnectionInternalInputObject_2
    original: originalTypeName_4
    resize: resizeTypeName_4
    resolutions: resolutionsTypeName_4
    sizes: sizesTypeName_4
}

"Filter connection on its fields"
input filterMarkdownRemark {
    excerpt: excerptQueryString_4
    fields: markdownRemarkConnectionFieldsInputObject_2
    fileAbsolutePath: markdownRemarkConnectionFileAbsolutePathQueryString_2
    frontmatter: markdownRemarkConnectionFrontmatterInputObject_2
    headings: headingsQueryList_4
    html: htmlQueryString_4
    id: markdownRemarkConnectionIdQueryString_2
    internal: markdownRemarkConnectionInternalInputObject_2
    rawMarkdownBody: markdownRemarkConnectionRawMarkdownBodyQueryString_2
    tableOfContents: tableOfContentsQueryString_4
    timeToRead: timeToReadQueryInt_4
    wordCount: wordCountTypeName_4
}

"Filter connection on its fields"
input filterSitePage {
    component: sitePageConnectionComponentQueryString
    componentChunkName: sitePageConnectionComponentChunkNameQueryString
    componentPath: sitePageConnectionComponentPathQueryString
    context: sitePageConnectionContextInputObject
    id: sitePageConnectionIdQueryString_2
    internal: sitePageConnectionInternalInputObject_2
    internalComponentName: sitePageConnectionInternalComponentNameQueryString
    jsonName: sitePageConnectionJsonNameQueryString
    path: sitePageConnectionPathQueryString_2
    pluginCreator: sitePageConnectionPluginCreatorInputObject
    pluginCreatorId: sitePageConnectionPluginCreatorIdQueryString_2
}

"Filter connection on its fields"
input filterSitePlugin {
    browserAPIs: sitePluginConnectionBrowserApIsQueryList_2
    id: sitePluginConnectionIdQueryString_2
    internal: sitePluginConnectionInternalInputObject_2
    name: sitePluginConnectionNameQueryString_2
    nodeAPIs: sitePluginConnectionNodeApIsQueryList_2
    packageJson: sitePluginConnectionPackageJsonInputObject_2
    pluginFilepath: sitePluginConnectionPluginFilepathQueryString_2
    pluginOptions: sitePluginConnectionPluginOptionsInputObject_2
    resolve: sitePluginConnectionResolveQueryString_2
    ssrAPIs: sitePluginConnectionSsrApIsQueryList_2
    version: sitePluginConnectionVersionQueryString_2
}

input fixedAspectRatioQueryFloat_3 {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input fixedAspectRatioQueryFloat_4 {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input fixedBase64QueryString_3 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fixedBase64QueryString_4 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fixedHeightQueryFloat_3 {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input fixedHeightQueryFloat_4 {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input fixedOriginalNameQueryString_3 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fixedOriginalNameQueryString_4 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fixedSrcQueryString_3 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fixedSrcQueryString_4 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fixedSrcSetQueryString_3 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fixedSrcSetQueryString_4 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fixedSrcSetWebpQueryString_3 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fixedSrcSetWebpQueryString_4 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fixedSrcWebpQueryString_3 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fixedSrcWebpQueryString_4 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fixedTracedSvgQueryString_3 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fixedTracedSvgQueryString_4 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fixedTypeName_3 {
    aspectRatio: fixedAspectRatioQueryFloat_3
    base64: fixedBase64QueryString_3
    height: fixedHeightQueryFloat_3
    originalName: fixedOriginalNameQueryString_3
    src: fixedSrcQueryString_3
    srcSet: fixedSrcSetQueryString_3
    srcSetWebp: fixedSrcSetWebpQueryString_3
    srcWebp: fixedSrcWebpQueryString_3
    tracedSVG: fixedTracedSvgQueryString_3
    width: fixedWidthQueryFloat_3
}

input fixedTypeName_4 {
    aspectRatio: fixedAspectRatioQueryFloat_4
    base64: fixedBase64QueryString_4
    height: fixedHeightQueryFloat_4
    originalName: fixedOriginalNameQueryString_4
    src: fixedSrcQueryString_4
    srcSet: fixedSrcSetQueryString_4
    srcSetWebp: fixedSrcSetWebpQueryString_4
    srcWebp: fixedSrcWebpQueryString_4
    tracedSVG: fixedTracedSvgQueryString_4
    width: fixedWidthQueryFloat_4
}

input fixedWidthQueryFloat_3 {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input fixedWidthQueryFloat_4 {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input fluidAspectRatioQueryFloat_3 {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input fluidAspectRatioQueryFloat_4 {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input fluidBase64QueryString_3 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fluidBase64QueryString_4 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fluidOriginalImgQueryString_3 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fluidOriginalImgQueryString_4 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fluidOriginalNameQueryString_3 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fluidOriginalNameQueryString_4 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fluidPresentationHeightQueryInt_3 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input fluidPresentationHeightQueryInt_4 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input fluidPresentationWidthQueryInt_3 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input fluidPresentationWidthQueryInt_4 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input fluidSizesQueryString_3 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fluidSizesQueryString_4 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fluidSrcQueryString_3 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fluidSrcQueryString_4 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fluidSrcSetQueryString_3 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fluidSrcSetQueryString_4 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fluidSrcSetWebpQueryString_3 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fluidSrcSetWebpQueryString_4 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fluidSrcWebpQueryString_3 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fluidSrcWebpQueryString_4 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fluidTracedSvgQueryString_3 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fluidTracedSvgQueryString_4 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input fluidTypeName_3 {
    aspectRatio: fluidAspectRatioQueryFloat_3
    base64: fluidBase64QueryString_3
    originalImg: fluidOriginalImgQueryString_3
    originalName: fluidOriginalNameQueryString_3
    presentationHeight: fluidPresentationHeightQueryInt_3
    presentationWidth: fluidPresentationWidthQueryInt_3
    sizes: fluidSizesQueryString_3
    src: fluidSrcQueryString_3
    srcSet: fluidSrcSetQueryString_3
    srcSetWebp: fluidSrcSetWebpQueryString_3
    srcWebp: fluidSrcWebpQueryString_3
    tracedSVG: fluidTracedSvgQueryString_3
}

input fluidTypeName_4 {
    aspectRatio: fluidAspectRatioQueryFloat_4
    base64: fluidBase64QueryString_4
    originalImg: fluidOriginalImgQueryString_4
    originalName: fluidOriginalNameQueryString_4
    presentationHeight: fluidPresentationHeightQueryInt_4
    presentationWidth: fluidPresentationWidthQueryInt_4
    sizes: fluidSizesQueryString_4
    src: fluidSrcQueryString_4
    srcSet: fluidSrcSetQueryString_4
    srcSetWebp: fluidSrcSetWebpQueryString_4
    srcWebp: fluidSrcWebpQueryString_4
    tracedSVG: fluidTracedSvgQueryString_4
}

input headingsListElemDepthQueryInt_3 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input headingsListElemDepthQueryInt_4 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input headingsListElemTypeName_3 {
    depth: headingsListElemDepthQueryInt_3
    value: headingsListElemValueQueryString_3
}

input headingsListElemTypeName_4 {
    depth: headingsListElemDepthQueryInt_4
    value: headingsListElemValueQueryString_4
}

input headingsListElemValueQueryString_3 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input headingsListElemValueQueryString_4 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input headingsQueryList_3 {
    elemMatch: headingsListElemTypeName_3
}

input headingsQueryList_4 {
    elemMatch: headingsListElemTypeName_4
}

input htmlQueryString_3 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input htmlQueryString_4 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input imageSharpConnectionIdQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input imageSharpConnectionInternalContentDigestQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input imageSharpConnectionInternalInputObject_2 {
    contentDigest: imageSharpConnectionInternalContentDigestQueryString_2
    owner: imageSharpConnectionInternalOwnerQueryString_2
    type: imageSharpConnectionInternalTypeQueryString_2
}

input imageSharpConnectionInternalOwnerQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input imageSharpConnectionInternalTypeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input imageSharpConnectionSort {
    fields: [ImageSharpConnectionSortByFieldsEnum]!
    order: [imageSharpConnectionSortOrderValues] = [ASC]
}

input imageSharpIdQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input imageSharpInternalContentDigestQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input imageSharpInternalInputObject_2 {
    contentDigest: imageSharpInternalContentDigestQueryString_2
    owner: imageSharpInternalOwnerQueryString_2
    type: imageSharpInternalTypeQueryString_2
}

input imageSharpInternalOwnerQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input imageSharpInternalTypeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFieldsInputObject_2 {
    slug: markdownRemarkConnectionFieldsSlugQueryString_2
}

input markdownRemarkConnectionFieldsSlugQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFileAbsolutePathQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterAboutQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterAdvisorsHeadingQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterAdvisorsInputObject_2 {
    heading: markdownRemarkConnectionFrontmatterAdvisorsHeadingQueryString_2
}

input markdownRemarkConnectionFrontmatterAngelListQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterComponentQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterCopyrightQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterDateQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterDescriptionQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterFooterInputObject_2 {
    links: markdownRemarkConnectionFrontmatterFooterLinksQueryList_2
    title: markdownRemarkConnectionFrontmatterFooterTitleQueryString_2
}

input markdownRemarkConnectionFrontmatterFooterLinksInputObject_2 {
    label: markdownRemarkConnectionFrontmatterFooterLinksLabelQueryString_2
    openNewTab: markdownRemarkConnectionFrontmatterFooterLinksOpenNewTabQueryString_2
    url: markdownRemarkConnectionFrontmatterFooterLinksUrlQueryString_2
}

input markdownRemarkConnectionFrontmatterFooterLinksLabelQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterFooterLinksOpenNewTabQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterFooterLinksQueryList_2 {
    elemMatch: markdownRemarkConnectionFrontmatterFooterLinksInputObject_2
}

input markdownRemarkConnectionFrontmatterFooterLinksUrlQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterFooterQueryList_2 {
    elemMatch: markdownRemarkConnectionFrontmatterFooterInputObject_2
}

input markdownRemarkConnectionFrontmatterFooterTitleQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterFullImageQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterGithubQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterHeadingQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterHeroBannerAltQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterHeroBannerImageQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterHeroBannerInputObject_2 {
    alt: markdownRemarkConnectionFrontmatterHeroBannerAltQueryString_2
    image: markdownRemarkConnectionFrontmatterHeroBannerImageQueryString_2
}

input markdownRemarkConnectionFrontmatterHeroComingDateQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterHeroDescriptionQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterHeroInputObject_2 {
    banner: markdownRemarkConnectionFrontmatterHeroBannerInputObject_2
    comingDate: markdownRemarkConnectionFrontmatterHeroComingDateQueryString_2
    description: markdownRemarkConnectionFrontmatterHeroDescriptionQueryString_2
    title: markdownRemarkConnectionFrontmatterHeroTitleQueryString_2
}

input markdownRemarkConnectionFrontmatterHeroTitleQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterHiringContentQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterHiringHeadingQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterHiringInputObject_2 {
    content: markdownRemarkConnectionFrontmatterHiringContentQueryString_2
    heading: markdownRemarkConnectionFrontmatterHiringHeadingQueryString_2
    link: markdownRemarkConnectionFrontmatterHiringLinkQueryString_2
    linkText: markdownRemarkConnectionFrontmatterHiringLinkTextQueryString_2
}

input markdownRemarkConnectionFrontmatterHiringLinkQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterHiringLinkTextQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterImageQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterImgQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterInputObject_2 {
    about: markdownRemarkConnectionFrontmatterAboutQueryString_2
    advisors: markdownRemarkConnectionFrontmatterAdvisorsInputObject_2
    angelList: markdownRemarkConnectionFrontmatterAngelListQueryString_2
    component: markdownRemarkConnectionFrontmatterComponentQueryString_2
    copyright: markdownRemarkConnectionFrontmatterCopyrightQueryString_2
    date: markdownRemarkConnectionFrontmatterDateQueryString_2
    description: markdownRemarkConnectionFrontmatterDescriptionQueryString_2
    footer: markdownRemarkConnectionFrontmatterFooterQueryList_2
    full_image: markdownRemarkConnectionFrontmatterFullImageQueryString_2
    github: markdownRemarkConnectionFrontmatterGithubQueryString_2
    heading: markdownRemarkConnectionFrontmatterHeadingQueryString_2
    hero: markdownRemarkConnectionFrontmatterHeroInputObject_2
    hiring: markdownRemarkConnectionFrontmatterHiringInputObject_2
    image: markdownRemarkConnectionFrontmatterImageQueryString_2
    img: markdownRemarkConnectionFrontmatterImgQueryString_2
    intro: markdownRemarkConnectionFrontmatterIntroInputObject_2
    investors: markdownRemarkConnectionFrontmatterInvestorsInputObject_2
    linkedin: markdownRemarkConnectionFrontmatterLinkedinQueryString_2
    main: markdownRemarkConnectionFrontmatterMainInputObject_2
    name: markdownRemarkConnectionFrontmatterNameQueryString_2
    offerings: markdownRemarkConnectionFrontmatterOfferingsInputObject_2
    onHomepage: markdownRemarkConnectionFrontmatterOnHomepageQueryBoolean_2
    order: markdownRemarkConnectionFrontmatterOrderQueryInteger_2
    partnerships: markdownRemarkConnectionFrontmatterPartnershipsInputObject_2
    path: markdownRemarkConnectionFrontmatterPathQueryString_2
    position: markdownRemarkConnectionFrontmatterPositionQueryString_2
    pricing: markdownRemarkConnectionFrontmatterPricingInputObject_2
    products: markdownRemarkConnectionFrontmatterProductsInputObject_2
    subheading: markdownRemarkConnectionFrontmatterSubheadingQueryString_2
    tags: markdownRemarkConnectionFrontmatterTagsQueryList_2
    team: markdownRemarkConnectionFrontmatterTeamInputObject_2
    templateKey: markdownRemarkConnectionFrontmatterTemplateKeyQueryString_2
    testimonials: markdownRemarkConnectionFrontmatterTestimonialsQueryList_2
    title: markdownRemarkConnectionFrontmatterTitleQueryString_2
    twitter: markdownRemarkConnectionFrontmatterTwitterQueryString_2
}

input markdownRemarkConnectionFrontmatterIntroBlurbsImageQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterIntroBlurbsInputObject_2 {
    image: markdownRemarkConnectionFrontmatterIntroBlurbsImageQueryString_2
    text: markdownRemarkConnectionFrontmatterIntroBlurbsTextQueryString_2
}

input markdownRemarkConnectionFrontmatterIntroBlurbsQueryList_2 {
    elemMatch: markdownRemarkConnectionFrontmatterIntroBlurbsInputObject_2
}

input markdownRemarkConnectionFrontmatterIntroBlurbsTextQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterIntroContentQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterIntroDescriptionQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterIntroHeadingQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterIntroImgAltQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterIntroImgImageQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterIntroImgInputObject_2 {
    alt: markdownRemarkConnectionFrontmatterIntroImgAltQueryString_2
    image: markdownRemarkConnectionFrontmatterIntroImgImageQueryString_2
}

input markdownRemarkConnectionFrontmatterIntroInputObject_2 {
    blurbs: markdownRemarkConnectionFrontmatterIntroBlurbsQueryList_2
    content: markdownRemarkConnectionFrontmatterIntroContentQueryString_2
    description: markdownRemarkConnectionFrontmatterIntroDescriptionQueryString_2
    heading: markdownRemarkConnectionFrontmatterIntroHeadingQueryString_2
    img: markdownRemarkConnectionFrontmatterIntroImgInputObject_2
}

input markdownRemarkConnectionFrontmatterInvestorsHeadingQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterInvestorsInputObject_2 {
    heading: markdownRemarkConnectionFrontmatterInvestorsHeadingQueryString_2
    list: markdownRemarkConnectionFrontmatterInvestorsListQueryList_2
}

input markdownRemarkConnectionFrontmatterInvestorsListImgAltQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterInvestorsListImgImageQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterInvestorsListImgInputObject_2 {
    alt: markdownRemarkConnectionFrontmatterInvestorsListImgAltQueryString_2
    image: markdownRemarkConnectionFrontmatterInvestorsListImgImageQueryString_2
}

input markdownRemarkConnectionFrontmatterInvestorsListInputObject_2 {
    img: markdownRemarkConnectionFrontmatterInvestorsListImgInputObject_2
    title: markdownRemarkConnectionFrontmatterInvestorsListTitleQueryString_2
    url: markdownRemarkConnectionFrontmatterInvestorsListUrlQueryString_2
}

input markdownRemarkConnectionFrontmatterInvestorsListQueryList_2 {
    elemMatch: markdownRemarkConnectionFrontmatterInvestorsListInputObject_2
}

input markdownRemarkConnectionFrontmatterInvestorsListTitleQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterInvestorsListUrlQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterLinkedinQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterMainDescriptionQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterMainHeadingQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterMainImage1AltQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterMainImage1ImageQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterMainImage1InputObject_2 {
    alt: markdownRemarkConnectionFrontmatterMainImage1AltQueryString_2
    image: markdownRemarkConnectionFrontmatterMainImage1ImageQueryString_2
}

input markdownRemarkConnectionFrontmatterMainImage2AltQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterMainImage2ImageQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterMainImage2InputObject_2 {
    alt: markdownRemarkConnectionFrontmatterMainImage2AltQueryString_2
    image: markdownRemarkConnectionFrontmatterMainImage2ImageQueryString_2
}

input markdownRemarkConnectionFrontmatterMainImage3AltQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterMainImage3ImageQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterMainImage3InputObject_2 {
    alt: markdownRemarkConnectionFrontmatterMainImage3AltQueryString_2
    image: markdownRemarkConnectionFrontmatterMainImage3ImageQueryString_2
}

input markdownRemarkConnectionFrontmatterMainInputObject_2 {
    description: markdownRemarkConnectionFrontmatterMainDescriptionQueryString_2
    heading: markdownRemarkConnectionFrontmatterMainHeadingQueryString_2
    image1: markdownRemarkConnectionFrontmatterMainImage1InputObject_2
    image2: markdownRemarkConnectionFrontmatterMainImage2InputObject_2
    image3: markdownRemarkConnectionFrontmatterMainImage3InputObject_2
}

input markdownRemarkConnectionFrontmatterNameQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterOfferingsContentQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterOfferingsHeadingQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterOfferingsInputObject_2 {
    content: markdownRemarkConnectionFrontmatterOfferingsContentQueryString_2
    heading: markdownRemarkConnectionFrontmatterOfferingsHeadingQueryString_2
    list: markdownRemarkConnectionFrontmatterOfferingsListQueryList_2
}

input markdownRemarkConnectionFrontmatterOfferingsListInputObject_2 {
    items: markdownRemarkConnectionFrontmatterOfferingsListItemsQueryList_2
    title: markdownRemarkConnectionFrontmatterOfferingsListTitleQueryString_2
}

input markdownRemarkConnectionFrontmatterOfferingsListItemsQueryList_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterOfferingsListQueryList_2 {
    elemMatch: markdownRemarkConnectionFrontmatterOfferingsListInputObject_2
}

input markdownRemarkConnectionFrontmatterOfferingsListTitleQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterOnHomepageQueryBoolean_2 {
    eq: Boolean
    in: [Boolean]
    ne: Boolean
    nin: [Boolean]
}

input markdownRemarkConnectionFrontmatterOrderQueryInteger_2 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input markdownRemarkConnectionFrontmatterPartnershipsHeadingQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterPartnershipsInputObject_2 {
    heading: markdownRemarkConnectionFrontmatterPartnershipsHeadingQueryString_2
    list: markdownRemarkConnectionFrontmatterPartnershipsListQueryList_2
}

input markdownRemarkConnectionFrontmatterPartnershipsListIconImageQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterPartnershipsListIconInputObject_2 {
    image: markdownRemarkConnectionFrontmatterPartnershipsListIconImageQueryString_2
}

input markdownRemarkConnectionFrontmatterPartnershipsListInputObject_2 {
    icon: markdownRemarkConnectionFrontmatterPartnershipsListIconInputObject_2
    title: markdownRemarkConnectionFrontmatterPartnershipsListTitleQueryString_2
}

input markdownRemarkConnectionFrontmatterPartnershipsListQueryList_2 {
    elemMatch: markdownRemarkConnectionFrontmatterPartnershipsListInputObject_2
}

input markdownRemarkConnectionFrontmatterPartnershipsListTitleQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterPathQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterPositionQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterPricingDescriptionQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterPricingHeadingQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterPricingInputObject_2 {
    description: markdownRemarkConnectionFrontmatterPricingDescriptionQueryString_2
    heading: markdownRemarkConnectionFrontmatterPricingHeadingQueryString_2
    plans: markdownRemarkConnectionFrontmatterPricingPlansQueryList_2
}

input markdownRemarkConnectionFrontmatterPricingPlansDescriptionQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterPricingPlansInputObject_2 {
    description: markdownRemarkConnectionFrontmatterPricingPlansDescriptionQueryString_2
    items: markdownRemarkConnectionFrontmatterPricingPlansItemsQueryList_2
    plan: markdownRemarkConnectionFrontmatterPricingPlansPlanQueryString_2
    price: markdownRemarkConnectionFrontmatterPricingPlansPriceQueryString_2
}

input markdownRemarkConnectionFrontmatterPricingPlansItemsQueryList_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterPricingPlansPlanQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterPricingPlansPriceQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterPricingPlansQueryList_2 {
    elemMatch: markdownRemarkConnectionFrontmatterPricingPlansInputObject_2
}

input markdownRemarkConnectionFrontmatterProductsHeadingQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterProductsInputObject_2 {
    heading: markdownRemarkConnectionFrontmatterProductsHeadingQueryString_2
    products: markdownRemarkConnectionFrontmatterProductsProductsQueryList_2
}

input markdownRemarkConnectionFrontmatterProductsProductsContentQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterProductsProductsImgAltQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterProductsProductsImgImageQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterProductsProductsImgInputObject_2 {
    alt: markdownRemarkConnectionFrontmatterProductsProductsImgAltQueryString_2
    image: markdownRemarkConnectionFrontmatterProductsProductsImgImageQueryString_2
}

input markdownRemarkConnectionFrontmatterProductsProductsInputObject_2 {
    content: markdownRemarkConnectionFrontmatterProductsProductsContentQueryString_2
    img: markdownRemarkConnectionFrontmatterProductsProductsImgInputObject_2
    list: markdownRemarkConnectionFrontmatterProductsProductsListQueryList_2
    title: markdownRemarkConnectionFrontmatterProductsProductsTitleQueryString_2
}

input markdownRemarkConnectionFrontmatterProductsProductsListQueryList_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterProductsProductsQueryList_2 {
    elemMatch: markdownRemarkConnectionFrontmatterProductsProductsInputObject_2
}

input markdownRemarkConnectionFrontmatterProductsProductsTitleQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterSubheadingQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterTagsQueryList_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterTeamContentQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterTeamHeadingQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterTeamInputObject_2 {
    content: markdownRemarkConnectionFrontmatterTeamContentQueryString_2
    heading: markdownRemarkConnectionFrontmatterTeamHeadingQueryString_2
}

input markdownRemarkConnectionFrontmatterTemplateKeyQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterTestimonialsAuthorQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterTestimonialsInputObject_2 {
    author: markdownRemarkConnectionFrontmatterTestimonialsAuthorQueryString_2
    quote: markdownRemarkConnectionFrontmatterTestimonialsQuoteQueryString_2
}

input markdownRemarkConnectionFrontmatterTestimonialsQueryList_2 {
    elemMatch: markdownRemarkConnectionFrontmatterTestimonialsInputObject_2
}

input markdownRemarkConnectionFrontmatterTestimonialsQuoteQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterTitleQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionFrontmatterTwitterQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionIdQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionInternalContentDigestQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionInternalContentQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionInternalFieldOwnersInputObject_2 {
    slug: markdownRemarkConnectionInternalFieldOwnersSlugQueryString_2
}

input markdownRemarkConnectionInternalFieldOwnersSlugQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionInternalInputObject_2 {
    content: markdownRemarkConnectionInternalContentQueryString_2
    contentDigest: markdownRemarkConnectionInternalContentDigestQueryString_2
    fieldOwners: markdownRemarkConnectionInternalFieldOwnersInputObject_2
    owner: markdownRemarkConnectionInternalOwnerQueryString_2
    type: markdownRemarkConnectionInternalTypeQueryString_2
}

input markdownRemarkConnectionInternalOwnerQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionInternalTypeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionRawMarkdownBodyQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkConnectionSort {
    fields: [MarkdownRemarkConnectionSortByFieldsEnum]!
    order: [markdownRemarkConnectionSortOrderValues] = [ASC]
}

input markdownRemarkFieldsInputObject_2 {
    slug: markdownRemarkFieldsSlugQueryString_2
}

input markdownRemarkFieldsSlugQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFileAbsolutePathQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterAboutQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterAdvisorsHeadingQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterAdvisorsInputObject_2 {
    heading: markdownRemarkFrontmatterAdvisorsHeadingQueryString_2
}

input markdownRemarkFrontmatterAngelListQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterComponentQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterCopyrightQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterDateQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterDescriptionQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterFooterInputObject_2 {
    links: markdownRemarkFrontmatterFooterLinksQueryList_2
    title: markdownRemarkFrontmatterFooterTitleQueryString_2
}

input markdownRemarkFrontmatterFooterLinksInputObject_2 {
    label: markdownRemarkFrontmatterFooterLinksLabelQueryString_2
    openNewTab: markdownRemarkFrontmatterFooterLinksOpenNewTabQueryString_2
    url: markdownRemarkFrontmatterFooterLinksUrlQueryString_2
}

input markdownRemarkFrontmatterFooterLinksLabelQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterFooterLinksOpenNewTabQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterFooterLinksQueryList_2 {
    elemMatch: markdownRemarkFrontmatterFooterLinksInputObject_2
}

input markdownRemarkFrontmatterFooterLinksUrlQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterFooterQueryList_2 {
    elemMatch: markdownRemarkFrontmatterFooterInputObject_2
}

input markdownRemarkFrontmatterFooterTitleQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterFullImageQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterGithubQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterHeadingQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterHeroBannerAltQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterHeroBannerImageQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterHeroBannerInputObject_2 {
    alt: markdownRemarkFrontmatterHeroBannerAltQueryString_2
    image: markdownRemarkFrontmatterHeroBannerImageQueryString_2
}

input markdownRemarkFrontmatterHeroComingDateQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterHeroDescriptionQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterHeroInputObject_2 {
    banner: markdownRemarkFrontmatterHeroBannerInputObject_2
    comingDate: markdownRemarkFrontmatterHeroComingDateQueryString_2
    description: markdownRemarkFrontmatterHeroDescriptionQueryString_2
    title: markdownRemarkFrontmatterHeroTitleQueryString_2
}

input markdownRemarkFrontmatterHeroTitleQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterHiringContentQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterHiringHeadingQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterHiringInputObject_2 {
    content: markdownRemarkFrontmatterHiringContentQueryString_2
    heading: markdownRemarkFrontmatterHiringHeadingQueryString_2
    link: markdownRemarkFrontmatterHiringLinkQueryString_2
    linkText: markdownRemarkFrontmatterHiringLinkTextQueryString_2
}

input markdownRemarkFrontmatterHiringLinkQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterHiringLinkTextQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterImageQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterImgQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterInputObject_2 {
    about: markdownRemarkFrontmatterAboutQueryString_2
    advisors: markdownRemarkFrontmatterAdvisorsInputObject_2
    angelList: markdownRemarkFrontmatterAngelListQueryString_2
    component: markdownRemarkFrontmatterComponentQueryString_2
    copyright: markdownRemarkFrontmatterCopyrightQueryString_2
    date: markdownRemarkFrontmatterDateQueryString_2
    description: markdownRemarkFrontmatterDescriptionQueryString_2
    footer: markdownRemarkFrontmatterFooterQueryList_2
    full_image: markdownRemarkFrontmatterFullImageQueryString_2
    github: markdownRemarkFrontmatterGithubQueryString_2
    heading: markdownRemarkFrontmatterHeadingQueryString_2
    hero: markdownRemarkFrontmatterHeroInputObject_2
    hiring: markdownRemarkFrontmatterHiringInputObject_2
    image: markdownRemarkFrontmatterImageQueryString_2
    img: markdownRemarkFrontmatterImgQueryString_2
    intro: markdownRemarkFrontmatterIntroInputObject_2
    investors: markdownRemarkFrontmatterInvestorsInputObject_2
    linkedin: markdownRemarkFrontmatterLinkedinQueryString_2
    main: markdownRemarkFrontmatterMainInputObject_2
    name: markdownRemarkFrontmatterNameQueryString_2
    offerings: markdownRemarkFrontmatterOfferingsInputObject_2
    onHomepage: markdownRemarkFrontmatterOnHomepageQueryBoolean_2
    order: markdownRemarkFrontmatterOrderQueryInteger_2
    partnerships: markdownRemarkFrontmatterPartnershipsInputObject_2
    path: markdownRemarkFrontmatterPathQueryString_2
    position: markdownRemarkFrontmatterPositionQueryString_2
    pricing: markdownRemarkFrontmatterPricingInputObject_2
    products: markdownRemarkFrontmatterProductsInputObject_2
    subheading: markdownRemarkFrontmatterSubheadingQueryString_2
    tags: markdownRemarkFrontmatterTagsQueryList_2
    team: markdownRemarkFrontmatterTeamInputObject_2
    templateKey: markdownRemarkFrontmatterTemplateKeyQueryString_2
    testimonials: markdownRemarkFrontmatterTestimonialsQueryList_2
    title: markdownRemarkFrontmatterTitleQueryString_2
    twitter: markdownRemarkFrontmatterTwitterQueryString_2
}

input markdownRemarkFrontmatterIntroBlurbsImageQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterIntroBlurbsInputObject_2 {
    image: markdownRemarkFrontmatterIntroBlurbsImageQueryString_2
    text: markdownRemarkFrontmatterIntroBlurbsTextQueryString_2
}

input markdownRemarkFrontmatterIntroBlurbsQueryList_2 {
    elemMatch: markdownRemarkFrontmatterIntroBlurbsInputObject_2
}

input markdownRemarkFrontmatterIntroBlurbsTextQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterIntroContentQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterIntroDescriptionQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterIntroHeadingQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterIntroImgAltQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterIntroImgImageQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterIntroImgInputObject_2 {
    alt: markdownRemarkFrontmatterIntroImgAltQueryString_2
    image: markdownRemarkFrontmatterIntroImgImageQueryString_2
}

input markdownRemarkFrontmatterIntroInputObject_2 {
    blurbs: markdownRemarkFrontmatterIntroBlurbsQueryList_2
    content: markdownRemarkFrontmatterIntroContentQueryString_2
    description: markdownRemarkFrontmatterIntroDescriptionQueryString_2
    heading: markdownRemarkFrontmatterIntroHeadingQueryString_2
    img: markdownRemarkFrontmatterIntroImgInputObject_2
}

input markdownRemarkFrontmatterInvestorsHeadingQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterInvestorsInputObject_2 {
    heading: markdownRemarkFrontmatterInvestorsHeadingQueryString_2
    list: markdownRemarkFrontmatterInvestorsListQueryList_2
}

input markdownRemarkFrontmatterInvestorsListImgAltQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterInvestorsListImgImageQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterInvestorsListImgInputObject_2 {
    alt: markdownRemarkFrontmatterInvestorsListImgAltQueryString_2
    image: markdownRemarkFrontmatterInvestorsListImgImageQueryString_2
}

input markdownRemarkFrontmatterInvestorsListInputObject_2 {
    img: markdownRemarkFrontmatterInvestorsListImgInputObject_2
    title: markdownRemarkFrontmatterInvestorsListTitleQueryString_2
    url: markdownRemarkFrontmatterInvestorsListUrlQueryString_2
}

input markdownRemarkFrontmatterInvestorsListQueryList_2 {
    elemMatch: markdownRemarkFrontmatterInvestorsListInputObject_2
}

input markdownRemarkFrontmatterInvestorsListTitleQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterInvestorsListUrlQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterLinkedinQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterMainDescriptionQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterMainHeadingQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterMainImage1AltQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterMainImage1ImageQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterMainImage1InputObject_2 {
    alt: markdownRemarkFrontmatterMainImage1AltQueryString_2
    image: markdownRemarkFrontmatterMainImage1ImageQueryString_2
}

input markdownRemarkFrontmatterMainImage2AltQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterMainImage2ImageQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterMainImage2InputObject_2 {
    alt: markdownRemarkFrontmatterMainImage2AltQueryString_2
    image: markdownRemarkFrontmatterMainImage2ImageQueryString_2
}

input markdownRemarkFrontmatterMainImage3AltQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterMainImage3ImageQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterMainImage3InputObject_2 {
    alt: markdownRemarkFrontmatterMainImage3AltQueryString_2
    image: markdownRemarkFrontmatterMainImage3ImageQueryString_2
}

input markdownRemarkFrontmatterMainInputObject_2 {
    description: markdownRemarkFrontmatterMainDescriptionQueryString_2
    heading: markdownRemarkFrontmatterMainHeadingQueryString_2
    image1: markdownRemarkFrontmatterMainImage1InputObject_2
    image2: markdownRemarkFrontmatterMainImage2InputObject_2
    image3: markdownRemarkFrontmatterMainImage3InputObject_2
}

input markdownRemarkFrontmatterNameQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterOfferingsContentQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterOfferingsHeadingQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterOfferingsInputObject_2 {
    content: markdownRemarkFrontmatterOfferingsContentQueryString_2
    heading: markdownRemarkFrontmatterOfferingsHeadingQueryString_2
    list: markdownRemarkFrontmatterOfferingsListQueryList_2
}

input markdownRemarkFrontmatterOfferingsListInputObject_2 {
    items: markdownRemarkFrontmatterOfferingsListItemsQueryList_2
    title: markdownRemarkFrontmatterOfferingsListTitleQueryString_2
}

input markdownRemarkFrontmatterOfferingsListItemsQueryList_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterOfferingsListQueryList_2 {
    elemMatch: markdownRemarkFrontmatterOfferingsListInputObject_2
}

input markdownRemarkFrontmatterOfferingsListTitleQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterOnHomepageQueryBoolean_2 {
    eq: Boolean
    in: [Boolean]
    ne: Boolean
    nin: [Boolean]
}

input markdownRemarkFrontmatterOrderQueryInteger_2 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input markdownRemarkFrontmatterPartnershipsHeadingQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterPartnershipsInputObject_2 {
    heading: markdownRemarkFrontmatterPartnershipsHeadingQueryString_2
    list: markdownRemarkFrontmatterPartnershipsListQueryList_2
}

input markdownRemarkFrontmatterPartnershipsListIconImageQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterPartnershipsListIconInputObject_2 {
    image: markdownRemarkFrontmatterPartnershipsListIconImageQueryString_2
}

input markdownRemarkFrontmatterPartnershipsListInputObject_2 {
    icon: markdownRemarkFrontmatterPartnershipsListIconInputObject_2
    title: markdownRemarkFrontmatterPartnershipsListTitleQueryString_2
}

input markdownRemarkFrontmatterPartnershipsListQueryList_2 {
    elemMatch: markdownRemarkFrontmatterPartnershipsListInputObject_2
}

input markdownRemarkFrontmatterPartnershipsListTitleQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterPathQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterPositionQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterPricingDescriptionQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterPricingHeadingQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterPricingInputObject_2 {
    description: markdownRemarkFrontmatterPricingDescriptionQueryString_2
    heading: markdownRemarkFrontmatterPricingHeadingQueryString_2
    plans: markdownRemarkFrontmatterPricingPlansQueryList_2
}

input markdownRemarkFrontmatterPricingPlansDescriptionQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterPricingPlansInputObject_2 {
    description: markdownRemarkFrontmatterPricingPlansDescriptionQueryString_2
    items: markdownRemarkFrontmatterPricingPlansItemsQueryList_2
    plan: markdownRemarkFrontmatterPricingPlansPlanQueryString_2
    price: markdownRemarkFrontmatterPricingPlansPriceQueryString_2
}

input markdownRemarkFrontmatterPricingPlansItemsQueryList_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterPricingPlansPlanQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterPricingPlansPriceQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterPricingPlansQueryList_2 {
    elemMatch: markdownRemarkFrontmatterPricingPlansInputObject_2
}

input markdownRemarkFrontmatterProductsHeadingQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterProductsInputObject_2 {
    heading: markdownRemarkFrontmatterProductsHeadingQueryString_2
    products: markdownRemarkFrontmatterProductsProductsQueryList_2
}

input markdownRemarkFrontmatterProductsProductsContentQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterProductsProductsImgAltQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterProductsProductsImgImageQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterProductsProductsImgInputObject_2 {
    alt: markdownRemarkFrontmatterProductsProductsImgAltQueryString_2
    image: markdownRemarkFrontmatterProductsProductsImgImageQueryString_2
}

input markdownRemarkFrontmatterProductsProductsInputObject_2 {
    content: markdownRemarkFrontmatterProductsProductsContentQueryString_2
    img: markdownRemarkFrontmatterProductsProductsImgInputObject_2
    list: markdownRemarkFrontmatterProductsProductsListQueryList_2
    title: markdownRemarkFrontmatterProductsProductsTitleQueryString_2
}

input markdownRemarkFrontmatterProductsProductsListQueryList_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterProductsProductsQueryList_2 {
    elemMatch: markdownRemarkFrontmatterProductsProductsInputObject_2
}

input markdownRemarkFrontmatterProductsProductsTitleQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterSubheadingQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterTagsQueryList_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterTeamContentQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterTeamHeadingQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterTeamInputObject_2 {
    content: markdownRemarkFrontmatterTeamContentQueryString_2
    heading: markdownRemarkFrontmatterTeamHeadingQueryString_2
}

input markdownRemarkFrontmatterTemplateKeyQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterTestimonialsAuthorQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterTestimonialsInputObject_2 {
    author: markdownRemarkFrontmatterTestimonialsAuthorQueryString_2
    quote: markdownRemarkFrontmatterTestimonialsQuoteQueryString_2
}

input markdownRemarkFrontmatterTestimonialsQueryList_2 {
    elemMatch: markdownRemarkFrontmatterTestimonialsInputObject_2
}

input markdownRemarkFrontmatterTestimonialsQuoteQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterTitleQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkFrontmatterTwitterQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkIdQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkInternalContentDigestQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkInternalContentQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkInternalFieldOwnersInputObject_2 {
    slug: markdownRemarkInternalFieldOwnersSlugQueryString_2
}

input markdownRemarkInternalFieldOwnersSlugQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkInternalInputObject_2 {
    content: markdownRemarkInternalContentQueryString_2
    contentDigest: markdownRemarkInternalContentDigestQueryString_2
    fieldOwners: markdownRemarkInternalFieldOwnersInputObject_2
    owner: markdownRemarkInternalOwnerQueryString_2
    type: markdownRemarkInternalTypeQueryString_2
}

input markdownRemarkInternalOwnerQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkInternalTypeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input markdownRemarkRawMarkdownBodyQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input originalHeightQueryFloat_3 {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input originalHeightQueryFloat_4 {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input originalSrcQueryString_3 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input originalSrcQueryString_4 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input originalTypeName_3 {
    height: originalHeightQueryFloat_3
    src: originalSrcQueryString_3
    width: originalWidthQueryFloat_3
}

input originalTypeName_4 {
    height: originalHeightQueryFloat_4
    src: originalSrcQueryString_4
    width: originalWidthQueryFloat_4
}

input originalWidthQueryFloat_3 {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input originalWidthQueryFloat_4 {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input publicUrlQueryString_3 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input publicUrlQueryString_4 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input resizeAspectRatioQueryFloat_3 {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input resizeAspectRatioQueryFloat_4 {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input resizeHeightQueryInt_3 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input resizeHeightQueryInt_4 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input resizeOriginalNameQueryString_3 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input resizeOriginalNameQueryString_4 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input resizeSrcQueryString_3 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input resizeSrcQueryString_4 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input resizeTracedSvgQueryString_3 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input resizeTracedSvgQueryString_4 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input resizeTypeName_3 {
    aspectRatio: resizeAspectRatioQueryFloat_3
    height: resizeHeightQueryInt_3
    originalName: resizeOriginalNameQueryString_3
    src: resizeSrcQueryString_3
    tracedSVG: resizeTracedSvgQueryString_3
    width: resizeWidthQueryInt_3
}

input resizeTypeName_4 {
    aspectRatio: resizeAspectRatioQueryFloat_4
    height: resizeHeightQueryInt_4
    originalName: resizeOriginalNameQueryString_4
    src: resizeSrcQueryString_4
    tracedSVG: resizeTracedSvgQueryString_4
    width: resizeWidthQueryInt_4
}

input resizeWidthQueryInt_3 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input resizeWidthQueryInt_4 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input resolutionsAspectRatioQueryFloat_3 {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input resolutionsAspectRatioQueryFloat_4 {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input resolutionsBase64QueryString_3 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input resolutionsBase64QueryString_4 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input resolutionsHeightQueryFloat_3 {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input resolutionsHeightQueryFloat_4 {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input resolutionsOriginalNameQueryString_3 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input resolutionsOriginalNameQueryString_4 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input resolutionsSrcQueryString_3 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input resolutionsSrcQueryString_4 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input resolutionsSrcSetQueryString_3 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input resolutionsSrcSetQueryString_4 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input resolutionsSrcSetWebpQueryString_3 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input resolutionsSrcSetWebpQueryString_4 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input resolutionsSrcWebpQueryString_3 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input resolutionsSrcWebpQueryString_4 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input resolutionsTracedSvgQueryString_3 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input resolutionsTracedSvgQueryString_4 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input resolutionsTypeName_3 {
    aspectRatio: resolutionsAspectRatioQueryFloat_3
    base64: resolutionsBase64QueryString_3
    height: resolutionsHeightQueryFloat_3
    originalName: resolutionsOriginalNameQueryString_3
    src: resolutionsSrcQueryString_3
    srcSet: resolutionsSrcSetQueryString_3
    srcSetWebp: resolutionsSrcSetWebpQueryString_3
    srcWebp: resolutionsSrcWebpQueryString_3
    tracedSVG: resolutionsTracedSvgQueryString_3
    width: resolutionsWidthQueryFloat_3
}

input resolutionsTypeName_4 {
    aspectRatio: resolutionsAspectRatioQueryFloat_4
    base64: resolutionsBase64QueryString_4
    height: resolutionsHeightQueryFloat_4
    originalName: resolutionsOriginalNameQueryString_4
    src: resolutionsSrcQueryString_4
    srcSet: resolutionsSrcSetQueryString_4
    srcSetWebp: resolutionsSrcSetWebpQueryString_4
    srcWebp: resolutionsSrcWebpQueryString_4
    tracedSVG: resolutionsTracedSvgQueryString_4
    width: resolutionsWidthQueryFloat_4
}

input resolutionsWidthQueryFloat_3 {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input resolutionsWidthQueryFloat_4 {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input siteBuildTimeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input siteHostQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input siteIdQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input siteInternalContentDigestQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input siteInternalInputObject_2 {
    contentDigest: siteInternalContentDigestQueryString_2
    owner: siteInternalOwnerQueryString_2
    type: siteInternalTypeQueryString_2
}

input siteInternalOwnerQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input siteInternalTypeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageComponentChunkNameQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageComponentPathQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageComponentQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionComponentChunkNameQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionComponentPathQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionComponentQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionContextIdQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionContextInputObject {
    id: sitePageConnectionContextIdQueryString
    lang: sitePageConnectionContextLangQueryString
    tag: sitePageConnectionContextTagQueryString
}

input sitePageConnectionContextLangQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionContextTagQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionIdQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionInternalComponentNameQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionInternalContentDigestQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionInternalDescriptionQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionInternalInputObject_2 {
    contentDigest: sitePageConnectionInternalContentDigestQueryString_2
    description: sitePageConnectionInternalDescriptionQueryString
    owner: sitePageConnectionInternalOwnerQueryString_2
    type: sitePageConnectionInternalTypeQueryString_2
}

input sitePageConnectionInternalOwnerQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionInternalTypeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionJsonNameQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionPathQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionPluginCreatorBrowserApIsQueryList {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionPluginCreatorIdQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionPluginCreatorIdQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionPluginCreatorInputObject {
    browserAPIs: sitePageConnectionPluginCreatorBrowserApIsQueryList
    id: sitePageConnectionPluginCreatorIdQueryString
    internal: sitePageConnectionPluginCreatorInternalInputObject
    name: sitePageConnectionPluginCreatorNameQueryString
    nodeAPIs: sitePageConnectionPluginCreatorNodeApIsQueryList
    packageJson: sitePageConnectionPluginCreatorPackageJsonInputObject
    pluginFilepath: sitePageConnectionPluginCreatorPluginFilepathQueryString
    pluginOptions: sitePageConnectionPluginCreatorPluginOptionsInputObject
    resolve: sitePageConnectionPluginCreatorResolveQueryString
    ssrAPIs: sitePageConnectionPluginCreatorSsrApIsQueryList
    version: sitePageConnectionPluginCreatorVersionQueryString
}

input sitePageConnectionPluginCreatorInternalContentDigestQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionPluginCreatorInternalInputObject {
    contentDigest: sitePageConnectionPluginCreatorInternalContentDigestQueryString
    owner: sitePageConnectionPluginCreatorInternalOwnerQueryString
    type: sitePageConnectionPluginCreatorInternalTypeQueryString
}

input sitePageConnectionPluginCreatorInternalOwnerQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionPluginCreatorInternalTypeQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionPluginCreatorNameQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionPluginCreatorNodeApIsQueryList {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionPluginCreatorPackageJsonAuthorQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionPluginCreatorPackageJsonDependenciesInputObject {
    name: sitePageConnectionPluginCreatorPackageJsonDependenciesNameQueryString
    version: sitePageConnectionPluginCreatorPackageJsonDependenciesVersionQueryString
}

input sitePageConnectionPluginCreatorPackageJsonDependenciesNameQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionPluginCreatorPackageJsonDependenciesQueryList {
    elemMatch: sitePageConnectionPluginCreatorPackageJsonDependenciesInputObject
}

input sitePageConnectionPluginCreatorPackageJsonDependenciesVersionQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionPluginCreatorPackageJsonDescriptionQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionPluginCreatorPackageJsonDevDependenciesInputObject {
    name: sitePageConnectionPluginCreatorPackageJsonDevDependenciesNameQueryString
    version: sitePageConnectionPluginCreatorPackageJsonDevDependenciesVersionQueryString
}

input sitePageConnectionPluginCreatorPackageJsonDevDependenciesNameQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionPluginCreatorPackageJsonDevDependenciesQueryList {
    elemMatch: sitePageConnectionPluginCreatorPackageJsonDevDependenciesInputObject
}

input sitePageConnectionPluginCreatorPackageJsonDevDependenciesVersionQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionPluginCreatorPackageJsonInputObject {
    author: sitePageConnectionPluginCreatorPackageJsonAuthorQueryString
    dependencies: sitePageConnectionPluginCreatorPackageJsonDependenciesQueryList
    description: sitePageConnectionPluginCreatorPackageJsonDescriptionQueryString
    devDependencies: sitePageConnectionPluginCreatorPackageJsonDevDependenciesQueryList
    keywords: sitePageConnectionPluginCreatorPackageJsonKeywordsQueryList
    license: sitePageConnectionPluginCreatorPackageJsonLicenseQueryString
    main: sitePageConnectionPluginCreatorPackageJsonMainQueryString
    name: sitePageConnectionPluginCreatorPackageJsonNameQueryString
    peerDependencies: sitePageConnectionPluginCreatorPackageJsonPeerDependenciesQueryList
    version: sitePageConnectionPluginCreatorPackageJsonVersionQueryString
}

input sitePageConnectionPluginCreatorPackageJsonKeywordsQueryList {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionPluginCreatorPackageJsonLicenseQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionPluginCreatorPackageJsonMainQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionPluginCreatorPackageJsonNameQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionPluginCreatorPackageJsonPeerDependenciesInputObject {
    name: sitePageConnectionPluginCreatorPackageJsonPeerDependenciesNameQueryString
    version: sitePageConnectionPluginCreatorPackageJsonPeerDependenciesVersionQueryString
}

input sitePageConnectionPluginCreatorPackageJsonPeerDependenciesNameQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionPluginCreatorPackageJsonPeerDependenciesQueryList {
    elemMatch: sitePageConnectionPluginCreatorPackageJsonPeerDependenciesInputObject
}

input sitePageConnectionPluginCreatorPackageJsonPeerDependenciesVersionQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionPluginCreatorPackageJsonVersionQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionPluginCreatorPluginFilepathQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionPluginCreatorPluginOptionsColorQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionPluginCreatorPluginOptionsDestinationDirQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionPluginCreatorPluginOptionsDevelopQueryBoolean {
    eq: Boolean
    in: [Boolean]
    ne: Boolean
    nin: [Boolean]
}

input sitePageConnectionPluginCreatorPluginOptionsDisplayNameQueryBoolean {
    eq: Boolean
    in: [Boolean]
    ne: Boolean
    nin: [Boolean]
}

input sitePageConnectionPluginCreatorPluginOptionsInputObject {
    color: sitePageConnectionPluginCreatorPluginOptionsColorQueryString
    destinationDir: sitePageConnectionPluginCreatorPluginOptionsDestinationDirQueryString
    develop: sitePageConnectionPluginCreatorPluginOptionsDevelopQueryBoolean
    displayName: sitePageConnectionPluginCreatorPluginOptionsDisplayNameQueryBoolean
    maxWidth: sitePageConnectionPluginCreatorPluginOptionsMaxWidthQueryInteger
    modulePath: sitePageConnectionPluginCreatorPluginOptionsModulePathQueryString
    name: sitePageConnectionPluginCreatorPluginOptionsNameQueryString
    path: sitePageConnectionPluginCreatorPluginOptionsPathQueryString
    pathCheck: sitePageConnectionPluginCreatorPluginOptionsPathCheckQueryBoolean
    plugins: sitePageConnectionPluginCreatorPluginOptionsPluginsQueryList
    purgeOnly: sitePageConnectionPluginCreatorPluginOptionsPurgeOnlyQueryList
    showSpinner: sitePageConnectionPluginCreatorPluginOptionsShowSpinnerQueryBoolean
}

input sitePageConnectionPluginCreatorPluginOptionsMaxWidthQueryInteger {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input sitePageConnectionPluginCreatorPluginOptionsModulePathQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionPluginCreatorPluginOptionsNameQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionPluginCreatorPluginOptionsPathCheckQueryBoolean {
    eq: Boolean
    in: [Boolean]
    ne: Boolean
    nin: [Boolean]
}

input sitePageConnectionPluginCreatorPluginOptionsPathQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionPluginCreatorPluginOptionsPluginsBrowserApIsQueryList {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionPluginCreatorPluginOptionsPluginsIdQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionPluginCreatorPluginOptionsPluginsInputObject {
    browserAPIs: sitePageConnectionPluginCreatorPluginOptionsPluginsBrowserApIsQueryList
    id: sitePageConnectionPluginCreatorPluginOptionsPluginsIdQueryString
    name: sitePageConnectionPluginCreatorPluginOptionsPluginsNameQueryString
    pluginFilepath: sitePageConnectionPluginCreatorPluginOptionsPluginsPluginFilepathQueryString
    pluginOptions: sitePageConnectionPluginCreatorPluginOptionsPluginsPluginOptionsInputObject
    resolve: sitePageConnectionPluginCreatorPluginOptionsPluginsResolveQueryString
    version: sitePageConnectionPluginCreatorPluginOptionsPluginsVersionQueryString
}

input sitePageConnectionPluginCreatorPluginOptionsPluginsNameQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionPluginCreatorPluginOptionsPluginsPluginFilepathQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionPluginCreatorPluginOptionsPluginsPluginOptionsDestinationDirQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionPluginCreatorPluginOptionsPluginsPluginOptionsInputObject {
    destinationDir: sitePageConnectionPluginCreatorPluginOptionsPluginsPluginOptionsDestinationDirQueryString
    maxWidth: sitePageConnectionPluginCreatorPluginOptionsPluginsPluginOptionsMaxWidthQueryInteger
    name: sitePageConnectionPluginCreatorPluginOptionsPluginsPluginOptionsNameQueryString
}

input sitePageConnectionPluginCreatorPluginOptionsPluginsPluginOptionsMaxWidthQueryInteger {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input sitePageConnectionPluginCreatorPluginOptionsPluginsPluginOptionsNameQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionPluginCreatorPluginOptionsPluginsQueryList {
    elemMatch: sitePageConnectionPluginCreatorPluginOptionsPluginsInputObject
}

input sitePageConnectionPluginCreatorPluginOptionsPluginsResolveQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionPluginCreatorPluginOptionsPluginsVersionQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionPluginCreatorPluginOptionsPurgeOnlyQueryList {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionPluginCreatorPluginOptionsShowSpinnerQueryBoolean {
    eq: Boolean
    in: [Boolean]
    ne: Boolean
    nin: [Boolean]
}

input sitePageConnectionPluginCreatorResolveQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionPluginCreatorSsrApIsQueryList {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionPluginCreatorVersionQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageConnectionSort {
    fields: [SitePageConnectionSortByFieldsEnum]!
    order: [sitePageConnectionSortOrderValues] = [ASC]
}

input sitePageContextIdQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageContextInputObject {
    id: sitePageContextIdQueryString
    lang: sitePageContextLangQueryString
    tag: sitePageContextTagQueryString
}

input sitePageContextLangQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageContextTagQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageIdQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageInternalComponentNameQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageInternalContentDigestQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageInternalDescriptionQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageInternalInputObject_2 {
    contentDigest: sitePageInternalContentDigestQueryString_2
    description: sitePageInternalDescriptionQueryString
    owner: sitePageInternalOwnerQueryString_2
    type: sitePageInternalTypeQueryString_2
}

input sitePageInternalOwnerQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageInternalTypeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePageJsonNameQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePagePathQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePagePluginCreatorBrowserApIsQueryList {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePagePluginCreatorIdQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePagePluginCreatorIdQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePagePluginCreatorInputObject {
    browserAPIs: sitePagePluginCreatorBrowserApIsQueryList
    id: sitePagePluginCreatorIdQueryString
    internal: sitePagePluginCreatorInternalInputObject
    name: sitePagePluginCreatorNameQueryString
    nodeAPIs: sitePagePluginCreatorNodeApIsQueryList
    packageJson: sitePagePluginCreatorPackageJsonInputObject
    pluginFilepath: sitePagePluginCreatorPluginFilepathQueryString
    pluginOptions: sitePagePluginCreatorPluginOptionsInputObject
    resolve: sitePagePluginCreatorResolveQueryString
    ssrAPIs: sitePagePluginCreatorSsrApIsQueryList
    version: sitePagePluginCreatorVersionQueryString
}

input sitePagePluginCreatorInternalContentDigestQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePagePluginCreatorInternalInputObject {
    contentDigest: sitePagePluginCreatorInternalContentDigestQueryString
    owner: sitePagePluginCreatorInternalOwnerQueryString
    type: sitePagePluginCreatorInternalTypeQueryString
}

input sitePagePluginCreatorInternalOwnerQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePagePluginCreatorInternalTypeQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePagePluginCreatorNameQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePagePluginCreatorNodeApIsQueryList {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePagePluginCreatorPackageJsonAuthorQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePagePluginCreatorPackageJsonDependenciesInputObject {
    name: sitePagePluginCreatorPackageJsonDependenciesNameQueryString
    version: sitePagePluginCreatorPackageJsonDependenciesVersionQueryString
}

input sitePagePluginCreatorPackageJsonDependenciesNameQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePagePluginCreatorPackageJsonDependenciesQueryList {
    elemMatch: sitePagePluginCreatorPackageJsonDependenciesInputObject
}

input sitePagePluginCreatorPackageJsonDependenciesVersionQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePagePluginCreatorPackageJsonDescriptionQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePagePluginCreatorPackageJsonDevDependenciesInputObject {
    name: sitePagePluginCreatorPackageJsonDevDependenciesNameQueryString
    version: sitePagePluginCreatorPackageJsonDevDependenciesVersionQueryString
}

input sitePagePluginCreatorPackageJsonDevDependenciesNameQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePagePluginCreatorPackageJsonDevDependenciesQueryList {
    elemMatch: sitePagePluginCreatorPackageJsonDevDependenciesInputObject
}

input sitePagePluginCreatorPackageJsonDevDependenciesVersionQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePagePluginCreatorPackageJsonInputObject {
    author: sitePagePluginCreatorPackageJsonAuthorQueryString
    dependencies: sitePagePluginCreatorPackageJsonDependenciesQueryList
    description: sitePagePluginCreatorPackageJsonDescriptionQueryString
    devDependencies: sitePagePluginCreatorPackageJsonDevDependenciesQueryList
    keywords: sitePagePluginCreatorPackageJsonKeywordsQueryList
    license: sitePagePluginCreatorPackageJsonLicenseQueryString
    main: sitePagePluginCreatorPackageJsonMainQueryString
    name: sitePagePluginCreatorPackageJsonNameQueryString
    peerDependencies: sitePagePluginCreatorPackageJsonPeerDependenciesQueryList
    version: sitePagePluginCreatorPackageJsonVersionQueryString
}

input sitePagePluginCreatorPackageJsonKeywordsQueryList {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePagePluginCreatorPackageJsonLicenseQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePagePluginCreatorPackageJsonMainQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePagePluginCreatorPackageJsonNameQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePagePluginCreatorPackageJsonPeerDependenciesInputObject {
    name: sitePagePluginCreatorPackageJsonPeerDependenciesNameQueryString
    version: sitePagePluginCreatorPackageJsonPeerDependenciesVersionQueryString
}

input sitePagePluginCreatorPackageJsonPeerDependenciesNameQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePagePluginCreatorPackageJsonPeerDependenciesQueryList {
    elemMatch: sitePagePluginCreatorPackageJsonPeerDependenciesInputObject
}

input sitePagePluginCreatorPackageJsonPeerDependenciesVersionQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePagePluginCreatorPackageJsonVersionQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePagePluginCreatorPluginFilepathQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePagePluginCreatorPluginOptionsColorQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePagePluginCreatorPluginOptionsDestinationDirQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePagePluginCreatorPluginOptionsDevelopQueryBoolean {
    eq: Boolean
    in: [Boolean]
    ne: Boolean
    nin: [Boolean]
}

input sitePagePluginCreatorPluginOptionsDisplayNameQueryBoolean {
    eq: Boolean
    in: [Boolean]
    ne: Boolean
    nin: [Boolean]
}

input sitePagePluginCreatorPluginOptionsInputObject {
    color: sitePagePluginCreatorPluginOptionsColorQueryString
    destinationDir: sitePagePluginCreatorPluginOptionsDestinationDirQueryString
    develop: sitePagePluginCreatorPluginOptionsDevelopQueryBoolean
    displayName: sitePagePluginCreatorPluginOptionsDisplayNameQueryBoolean
    maxWidth: sitePagePluginCreatorPluginOptionsMaxWidthQueryInteger
    modulePath: sitePagePluginCreatorPluginOptionsModulePathQueryString
    name: sitePagePluginCreatorPluginOptionsNameQueryString
    path: sitePagePluginCreatorPluginOptionsPathQueryString
    pathCheck: sitePagePluginCreatorPluginOptionsPathCheckQueryBoolean
    plugins: sitePagePluginCreatorPluginOptionsPluginsQueryList
    purgeOnly: sitePagePluginCreatorPluginOptionsPurgeOnlyQueryList
    showSpinner: sitePagePluginCreatorPluginOptionsShowSpinnerQueryBoolean
}

input sitePagePluginCreatorPluginOptionsMaxWidthQueryInteger {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input sitePagePluginCreatorPluginOptionsModulePathQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePagePluginCreatorPluginOptionsNameQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePagePluginCreatorPluginOptionsPathCheckQueryBoolean {
    eq: Boolean
    in: [Boolean]
    ne: Boolean
    nin: [Boolean]
}

input sitePagePluginCreatorPluginOptionsPathQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePagePluginCreatorPluginOptionsPluginsBrowserApIsQueryList {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePagePluginCreatorPluginOptionsPluginsIdQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePagePluginCreatorPluginOptionsPluginsInputObject {
    browserAPIs: sitePagePluginCreatorPluginOptionsPluginsBrowserApIsQueryList
    id: sitePagePluginCreatorPluginOptionsPluginsIdQueryString
    name: sitePagePluginCreatorPluginOptionsPluginsNameQueryString
    pluginFilepath: sitePagePluginCreatorPluginOptionsPluginsPluginFilepathQueryString
    pluginOptions: sitePagePluginCreatorPluginOptionsPluginsPluginOptionsInputObject
    resolve: sitePagePluginCreatorPluginOptionsPluginsResolveQueryString
    version: sitePagePluginCreatorPluginOptionsPluginsVersionQueryString
}

input sitePagePluginCreatorPluginOptionsPluginsNameQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePagePluginCreatorPluginOptionsPluginsPluginFilepathQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePagePluginCreatorPluginOptionsPluginsPluginOptionsDestinationDirQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePagePluginCreatorPluginOptionsPluginsPluginOptionsInputObject {
    destinationDir: sitePagePluginCreatorPluginOptionsPluginsPluginOptionsDestinationDirQueryString
    maxWidth: sitePagePluginCreatorPluginOptionsPluginsPluginOptionsMaxWidthQueryInteger
    name: sitePagePluginCreatorPluginOptionsPluginsPluginOptionsNameQueryString
}

input sitePagePluginCreatorPluginOptionsPluginsPluginOptionsMaxWidthQueryInteger {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input sitePagePluginCreatorPluginOptionsPluginsPluginOptionsNameQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePagePluginCreatorPluginOptionsPluginsQueryList {
    elemMatch: sitePagePluginCreatorPluginOptionsPluginsInputObject
}

input sitePagePluginCreatorPluginOptionsPluginsResolveQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePagePluginCreatorPluginOptionsPluginsVersionQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePagePluginCreatorPluginOptionsPurgeOnlyQueryList {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePagePluginCreatorPluginOptionsShowSpinnerQueryBoolean {
    eq: Boolean
    in: [Boolean]
    ne: Boolean
    nin: [Boolean]
}

input sitePagePluginCreatorResolveQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePagePluginCreatorSsrApIsQueryList {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePagePluginCreatorVersionQueryString {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePathPrefixQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginBrowserApIsQueryList_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginConnectionBrowserApIsQueryList_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginConnectionIdQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginConnectionInternalContentDigestQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginConnectionInternalInputObject_2 {
    contentDigest: sitePluginConnectionInternalContentDigestQueryString_2
    owner: sitePluginConnectionInternalOwnerQueryString_2
    type: sitePluginConnectionInternalTypeQueryString_2
}

input sitePluginConnectionInternalOwnerQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginConnectionInternalTypeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginConnectionNameQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginConnectionNodeApIsQueryList_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginConnectionPackageJsonAuthorQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginConnectionPackageJsonDependenciesInputObject_2 {
    name: sitePluginConnectionPackageJsonDependenciesNameQueryString_2
    version: sitePluginConnectionPackageJsonDependenciesVersionQueryString_2
}

input sitePluginConnectionPackageJsonDependenciesNameQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginConnectionPackageJsonDependenciesQueryList_2 {
    elemMatch: sitePluginConnectionPackageJsonDependenciesInputObject_2
}

input sitePluginConnectionPackageJsonDependenciesVersionQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginConnectionPackageJsonDescriptionQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginConnectionPackageJsonDevDependenciesInputObject_2 {
    name: sitePluginConnectionPackageJsonDevDependenciesNameQueryString_2
    version: sitePluginConnectionPackageJsonDevDependenciesVersionQueryString_2
}

input sitePluginConnectionPackageJsonDevDependenciesNameQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginConnectionPackageJsonDevDependenciesQueryList_2 {
    elemMatch: sitePluginConnectionPackageJsonDevDependenciesInputObject_2
}

input sitePluginConnectionPackageJsonDevDependenciesVersionQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginConnectionPackageJsonInputObject_2 {
    author: sitePluginConnectionPackageJsonAuthorQueryString_2
    dependencies: sitePluginConnectionPackageJsonDependenciesQueryList_2
    description: sitePluginConnectionPackageJsonDescriptionQueryString_2
    devDependencies: sitePluginConnectionPackageJsonDevDependenciesQueryList_2
    keywords: sitePluginConnectionPackageJsonKeywordsQueryList_2
    license: sitePluginConnectionPackageJsonLicenseQueryString_2
    main: sitePluginConnectionPackageJsonMainQueryString_2
    name: sitePluginConnectionPackageJsonNameQueryString_2
    peerDependencies: sitePluginConnectionPackageJsonPeerDependenciesQueryList_2
    version: sitePluginConnectionPackageJsonVersionQueryString_2
}

input sitePluginConnectionPackageJsonKeywordsQueryList_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginConnectionPackageJsonLicenseQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginConnectionPackageJsonMainQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginConnectionPackageJsonNameQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginConnectionPackageJsonPeerDependenciesInputObject_2 {
    name: sitePluginConnectionPackageJsonPeerDependenciesNameQueryString_2
    version: sitePluginConnectionPackageJsonPeerDependenciesVersionQueryString_2
}

input sitePluginConnectionPackageJsonPeerDependenciesNameQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginConnectionPackageJsonPeerDependenciesQueryList_2 {
    elemMatch: sitePluginConnectionPackageJsonPeerDependenciesInputObject_2
}

input sitePluginConnectionPackageJsonPeerDependenciesVersionQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginConnectionPackageJsonVersionQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginConnectionPluginFilepathQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginConnectionPluginOptionsColorQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginConnectionPluginOptionsDestinationDirQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginConnectionPluginOptionsDevelopQueryBoolean_2 {
    eq: Boolean
    in: [Boolean]
    ne: Boolean
    nin: [Boolean]
}

input sitePluginConnectionPluginOptionsDisplayNameQueryBoolean_2 {
    eq: Boolean
    in: [Boolean]
    ne: Boolean
    nin: [Boolean]
}

input sitePluginConnectionPluginOptionsInputObject_2 {
    color: sitePluginConnectionPluginOptionsColorQueryString_2
    destinationDir: sitePluginConnectionPluginOptionsDestinationDirQueryString_2
    develop: sitePluginConnectionPluginOptionsDevelopQueryBoolean_2
    displayName: sitePluginConnectionPluginOptionsDisplayNameQueryBoolean_2
    maxWidth: sitePluginConnectionPluginOptionsMaxWidthQueryInteger_2
    modulePath: sitePluginConnectionPluginOptionsModulePathQueryString_2
    name: sitePluginConnectionPluginOptionsNameQueryString_2
    path: sitePluginConnectionPluginOptionsPathQueryString_2
    pathCheck: sitePluginConnectionPluginOptionsPathCheckQueryBoolean_2
    plugins: sitePluginConnectionPluginOptionsPluginsQueryList_2
    purgeOnly: sitePluginConnectionPluginOptionsPurgeOnlyQueryList_2
    showSpinner: sitePluginConnectionPluginOptionsShowSpinnerQueryBoolean_2
}

input sitePluginConnectionPluginOptionsMaxWidthQueryInteger_2 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input sitePluginConnectionPluginOptionsModulePathQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginConnectionPluginOptionsNameQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginConnectionPluginOptionsPathCheckQueryBoolean_2 {
    eq: Boolean
    in: [Boolean]
    ne: Boolean
    nin: [Boolean]
}

input sitePluginConnectionPluginOptionsPathQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginConnectionPluginOptionsPluginsBrowserApIsQueryList_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginConnectionPluginOptionsPluginsIdQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginConnectionPluginOptionsPluginsInputObject_2 {
    browserAPIs: sitePluginConnectionPluginOptionsPluginsBrowserApIsQueryList_2
    id: sitePluginConnectionPluginOptionsPluginsIdQueryString_2
    name: sitePluginConnectionPluginOptionsPluginsNameQueryString_2
    pluginFilepath: sitePluginConnectionPluginOptionsPluginsPluginFilepathQueryString_2
    pluginOptions: sitePluginConnectionPluginOptionsPluginsPluginOptionsInputObject_2
    resolve: sitePluginConnectionPluginOptionsPluginsResolveQueryString_2
    version: sitePluginConnectionPluginOptionsPluginsVersionQueryString_2
}

input sitePluginConnectionPluginOptionsPluginsNameQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginConnectionPluginOptionsPluginsPluginFilepathQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginConnectionPluginOptionsPluginsPluginOptionsDestinationDirQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginConnectionPluginOptionsPluginsPluginOptionsInputObject_2 {
    destinationDir: sitePluginConnectionPluginOptionsPluginsPluginOptionsDestinationDirQueryString_2
    maxWidth: sitePluginConnectionPluginOptionsPluginsPluginOptionsMaxWidthQueryInteger_2
    name: sitePluginConnectionPluginOptionsPluginsPluginOptionsNameQueryString_2
}

input sitePluginConnectionPluginOptionsPluginsPluginOptionsMaxWidthQueryInteger_2 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input sitePluginConnectionPluginOptionsPluginsPluginOptionsNameQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginConnectionPluginOptionsPluginsQueryList_2 {
    elemMatch: sitePluginConnectionPluginOptionsPluginsInputObject_2
}

input sitePluginConnectionPluginOptionsPluginsResolveQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginConnectionPluginOptionsPluginsVersionQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginConnectionPluginOptionsPurgeOnlyQueryList_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginConnectionPluginOptionsShowSpinnerQueryBoolean_2 {
    eq: Boolean
    in: [Boolean]
    ne: Boolean
    nin: [Boolean]
}

input sitePluginConnectionResolveQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginConnectionSort {
    fields: [SitePluginConnectionSortByFieldsEnum]!
    order: [sitePluginConnectionSortOrderValues] = [ASC]
}

input sitePluginConnectionSsrApIsQueryList_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginConnectionVersionQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginIdQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginInternalContentDigestQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginInternalInputObject_2 {
    contentDigest: sitePluginInternalContentDigestQueryString_2
    owner: sitePluginInternalOwnerQueryString_2
    type: sitePluginInternalTypeQueryString_2
}

input sitePluginInternalOwnerQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginInternalTypeQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginNameQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginNodeApIsQueryList_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginPackageJsonAuthorQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginPackageJsonDependenciesInputObject_2 {
    name: sitePluginPackageJsonDependenciesNameQueryString_2
    version: sitePluginPackageJsonDependenciesVersionQueryString_2
}

input sitePluginPackageJsonDependenciesNameQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginPackageJsonDependenciesQueryList_2 {
    elemMatch: sitePluginPackageJsonDependenciesInputObject_2
}

input sitePluginPackageJsonDependenciesVersionQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginPackageJsonDescriptionQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginPackageJsonDevDependenciesInputObject_2 {
    name: sitePluginPackageJsonDevDependenciesNameQueryString_2
    version: sitePluginPackageJsonDevDependenciesVersionQueryString_2
}

input sitePluginPackageJsonDevDependenciesNameQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginPackageJsonDevDependenciesQueryList_2 {
    elemMatch: sitePluginPackageJsonDevDependenciesInputObject_2
}

input sitePluginPackageJsonDevDependenciesVersionQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginPackageJsonInputObject_2 {
    author: sitePluginPackageJsonAuthorQueryString_2
    dependencies: sitePluginPackageJsonDependenciesQueryList_2
    description: sitePluginPackageJsonDescriptionQueryString_2
    devDependencies: sitePluginPackageJsonDevDependenciesQueryList_2
    keywords: sitePluginPackageJsonKeywordsQueryList_2
    license: sitePluginPackageJsonLicenseQueryString_2
    main: sitePluginPackageJsonMainQueryString_2
    name: sitePluginPackageJsonNameQueryString_2
    peerDependencies: sitePluginPackageJsonPeerDependenciesQueryList_2
    version: sitePluginPackageJsonVersionQueryString_2
}

input sitePluginPackageJsonKeywordsQueryList_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginPackageJsonLicenseQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginPackageJsonMainQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginPackageJsonNameQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginPackageJsonPeerDependenciesInputObject_2 {
    name: sitePluginPackageJsonPeerDependenciesNameQueryString_2
    version: sitePluginPackageJsonPeerDependenciesVersionQueryString_2
}

input sitePluginPackageJsonPeerDependenciesNameQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginPackageJsonPeerDependenciesQueryList_2 {
    elemMatch: sitePluginPackageJsonPeerDependenciesInputObject_2
}

input sitePluginPackageJsonPeerDependenciesVersionQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginPackageJsonVersionQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginPluginFilepathQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginPluginOptionsColorQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginPluginOptionsDestinationDirQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginPluginOptionsDevelopQueryBoolean_2 {
    eq: Boolean
    in: [Boolean]
    ne: Boolean
    nin: [Boolean]
}

input sitePluginPluginOptionsDisplayNameQueryBoolean_2 {
    eq: Boolean
    in: [Boolean]
    ne: Boolean
    nin: [Boolean]
}

input sitePluginPluginOptionsInputObject_2 {
    color: sitePluginPluginOptionsColorQueryString_2
    destinationDir: sitePluginPluginOptionsDestinationDirQueryString_2
    develop: sitePluginPluginOptionsDevelopQueryBoolean_2
    displayName: sitePluginPluginOptionsDisplayNameQueryBoolean_2
    maxWidth: sitePluginPluginOptionsMaxWidthQueryInteger_2
    modulePath: sitePluginPluginOptionsModulePathQueryString_2
    name: sitePluginPluginOptionsNameQueryString_2
    path: sitePluginPluginOptionsPathQueryString_2
    pathCheck: sitePluginPluginOptionsPathCheckQueryBoolean_2
    plugins: sitePluginPluginOptionsPluginsQueryList_2
    purgeOnly: sitePluginPluginOptionsPurgeOnlyQueryList_2
    showSpinner: sitePluginPluginOptionsShowSpinnerQueryBoolean_2
}

input sitePluginPluginOptionsMaxWidthQueryInteger_2 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input sitePluginPluginOptionsModulePathQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginPluginOptionsNameQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginPluginOptionsPathCheckQueryBoolean_2 {
    eq: Boolean
    in: [Boolean]
    ne: Boolean
    nin: [Boolean]
}

input sitePluginPluginOptionsPathQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginPluginOptionsPluginsBrowserApIsQueryList_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginPluginOptionsPluginsIdQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginPluginOptionsPluginsInputObject_2 {
    browserAPIs: sitePluginPluginOptionsPluginsBrowserApIsQueryList_2
    id: sitePluginPluginOptionsPluginsIdQueryString_2
    name: sitePluginPluginOptionsPluginsNameQueryString_2
    pluginFilepath: sitePluginPluginOptionsPluginsPluginFilepathQueryString_2
    pluginOptions: sitePluginPluginOptionsPluginsPluginOptionsInputObject_2
    resolve: sitePluginPluginOptionsPluginsResolveQueryString_2
    version: sitePluginPluginOptionsPluginsVersionQueryString_2
}

input sitePluginPluginOptionsPluginsNameQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginPluginOptionsPluginsPluginFilepathQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginPluginOptionsPluginsPluginOptionsDestinationDirQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginPluginOptionsPluginsPluginOptionsInputObject_2 {
    destinationDir: sitePluginPluginOptionsPluginsPluginOptionsDestinationDirQueryString_2
    maxWidth: sitePluginPluginOptionsPluginsPluginOptionsMaxWidthQueryInteger_2
    name: sitePluginPluginOptionsPluginsPluginOptionsNameQueryString_2
}

input sitePluginPluginOptionsPluginsPluginOptionsMaxWidthQueryInteger_2 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input sitePluginPluginOptionsPluginsPluginOptionsNameQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginPluginOptionsPluginsQueryList_2 {
    elemMatch: sitePluginPluginOptionsPluginsInputObject_2
}

input sitePluginPluginOptionsPluginsResolveQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginPluginOptionsPluginsVersionQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginPluginOptionsPurgeOnlyQueryList_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginPluginOptionsShowSpinnerQueryBoolean_2 {
    eq: Boolean
    in: [Boolean]
    ne: Boolean
    nin: [Boolean]
}

input sitePluginResolveQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginSsrApIsQueryList_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePluginVersionQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sitePolyfillQueryBoolean_2 {
    eq: Boolean
    in: [Boolean]
    ne: Boolean
    nin: [Boolean]
}

input sitePortQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input siteSiteMetadataDescriptionQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input siteSiteMetadataInputObject_2 {
    description: siteSiteMetadataDescriptionQueryString_2
    title: siteSiteMetadataTitleQueryString_2
}

input siteSiteMetadataTitleQueryString_2 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sizesAspectRatioQueryFloat_3 {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input sizesAspectRatioQueryFloat_4 {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input sizesBase64QueryString_3 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sizesBase64QueryString_4 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sizesOriginalImgQueryString_3 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sizesOriginalImgQueryString_4 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sizesOriginalNameQueryString_3 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sizesOriginalNameQueryString_4 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sizesPresentationHeightQueryInt_3 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input sizesPresentationHeightQueryInt_4 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input sizesPresentationWidthQueryInt_3 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input sizesPresentationWidthQueryInt_4 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input sizesSizesQueryString_3 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sizesSizesQueryString_4 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sizesSrcQueryString_3 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sizesSrcQueryString_4 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sizesSrcSetQueryString_3 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sizesSrcSetQueryString_4 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sizesSrcSetWebpQueryString_3 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sizesSrcSetWebpQueryString_4 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sizesSrcWebpQueryString_3 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sizesSrcWebpQueryString_4 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sizesTracedSvgQueryString_3 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sizesTracedSvgQueryString_4 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input sizesTypeName_3 {
    aspectRatio: sizesAspectRatioQueryFloat_3
    base64: sizesBase64QueryString_3
    originalImg: sizesOriginalImgQueryString_3
    originalName: sizesOriginalNameQueryString_3
    presentationHeight: sizesPresentationHeightQueryInt_3
    presentationWidth: sizesPresentationWidthQueryInt_3
    sizes: sizesSizesQueryString_3
    src: sizesSrcQueryString_3
    srcSet: sizesSrcSetQueryString_3
    srcSetWebp: sizesSrcSetWebpQueryString_3
    srcWebp: sizesSrcWebpQueryString_3
    tracedSVG: sizesTracedSvgQueryString_3
}

input sizesTypeName_4 {
    aspectRatio: sizesAspectRatioQueryFloat_4
    base64: sizesBase64QueryString_4
    originalImg: sizesOriginalImgQueryString_4
    originalName: sizesOriginalNameQueryString_4
    presentationHeight: sizesPresentationHeightQueryInt_4
    presentationWidth: sizesPresentationWidthQueryInt_4
    sizes: sizesSizesQueryString_4
    src: sizesSrcQueryString_4
    srcSet: sizesSrcSetQueryString_4
    srcSetWebp: sizesSrcSetWebpQueryString_4
    srcWebp: sizesSrcWebpQueryString_4
    tracedSVG: sizesTracedSvgQueryString_4
}

input tableOfContentsQueryString_3 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input tableOfContentsQueryString_4 {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input timeToReadQueryInt_3 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input timeToReadQueryInt_4 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input wordCountParagraphsQueryInt_3 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input wordCountParagraphsQueryInt_4 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input wordCountSentencesQueryInt_3 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input wordCountSentencesQueryInt_4 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input wordCountTypeName_3 {
    paragraphs: wordCountParagraphsQueryInt_3
    sentences: wordCountSentencesQueryInt_3
    words: wordCountWordsQueryInt_3
}

input wordCountTypeName_4 {
    paragraphs: wordCountParagraphsQueryInt_4
    sentences: wordCountSentencesQueryInt_4
    words: wordCountWordsQueryInt_4
}

input wordCountWordsQueryInt_3 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input wordCountWordsQueryInt_4 {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}


"A date string, such as 2007-12-03, compliant with the ISO 8601 standard  for representation of dates and times using the Gregorian calendar."
scalar Date

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON
